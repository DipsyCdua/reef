---
title: "Reef03 - Shiny Application"
author: "530318646, "
date: today
repository: https://github.com/DipsyCdua/reef.git
format: 
  html:
    embed-resources: true
    code-fold: true
    code-tools: true
    theme: sandstone
    fig_caption: yes
    table-of-contents: true
    toc: true
    toc_depth: 4
    toc_float: true
execute:
  echo: true
  tidy: true
number-sections: false
---
```{r setup, echo=FALSE}
library(shiny)
library(shinydashboard)
library(dplyr)
library(sf)
library(leaflet)
library(stringr)
library(lubridate)
library(readr)
library(tidyr)
library(viridis)
library(plotly)
library(gghighlight)
library(vroom)
library(reshape2)
library(RColorBrewer)

set.seed(3926)
```

# Data Summaries & Preprocessing

## Data

```{r vroom-data, message=FALSE}
all_data <- vroom(
  file      = "output_data/NEW_reef_full.csv",
  delim     = ",",
  col_types = cols(date = col_date(format = ""))  # parse date up front
) %>%
  mutate(
    year  = year(date),
    month = month(date, label = TRUE, abbr = TRUE)
  )

#----SOI INDEX----

soi <- vroom(
  file      = "output_data/soi_index_py.csv",
  delim     = ",",
  col_types = cols(Date = col_date(format = ""))  # parse your “Date” column
) %>%
  rename(date = Date) %>%       # rename for consistency
  mutate(year = year(date)) %>%
  filter(year >= 1987, year <= 2024) %>%
  arrange(date) %>%
  select(date, soi_anomaly)
```




## Summarise Temperature Variables

Original data was daily temperature data including daily DHW, SST and SSTA for every point in the GBR. All temperature averages are calculated on this data.

1. Yearly average for every point on GBR

2. Monthly Average across the entire GBR

```{r temp-summary, message=FALSE}
# ALL TEMPERATURE VARIABLES yearly avg for every point on GBR
yearly_temp_avg <- all_data |>
  group_by(year, lon, lat) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE),
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  )


# ALL TEMPERATURE VARIABLES monthly avg across entire GBR
monthly_temp <- all_data |>
  group_by(shelf, year, month) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE), 
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop")
```

## GBR Boundaries

Continental Shelf (Inner, Mid, Outer) will be included as an optional overlay in the maps.

```{r bound, message=FALSE, results='hide'}
#----BOUNDARIES----

# shelf zones (will complete this before monday week 12, for now use management zones in the models)
shelf_sf <- st_read("output_data/shelf_boundaries/shelf_zones_dissolved.shp")
st_crs(shelf_sf)

# check
any(!st_is_valid(shelf_sf)) # good!

# rename shelf class
shelf_sf <- dplyr::rename(shelf_sf, shelf_class = shlf_cl)

# look at shelf
ggplot(shelf_sf) +
  geom_sf(aes(fill = shelf_class), colour = NA) +
  coord_sf()

# for the map, extract the lon and lat needed for it to be zoomed in at an optimal point

unique_coords <- all_data |>
    dplyr::select(lon, lat) |>
    dplyr::distinct()

unique_sf <- sf::st_as_sf(unique_coords, coords = c("lon", "lat"), crs = 4326)


# get bounding box from your sf object
bbox <- st_bbox(unique_sf)

# extract coordinates
unique_coords <- all_data |>
  dplyr::select(lon, lat) |>
  dplyr::distinct()

unique_sf <- st_as_sf(unique_coords, coords = c("lon", "lat"), crs = 4326)
```

## Modelling Data - Predicting Temperature

### GAM predictions

```{r}
gam_data <- vroom(
  file      = "output_data/all_data_with_gam_predictions.csv",
  delim     = ",",
  col_types = cols(date = col_date(format = ""))  # parse date up front
) |>
  select(-month) |>
  mutate(month = month(date, label = TRUE, abbr = TRUE))
glimpse(gam_data)

gam_yearly_temp_avg <- gam_data |>
  group_by(year, lon, lat) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE),
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    pred_dhw = mean(pred_dhw, na.rm = TRUE),
    pred_sst = mean(pred_sst, na.rm = TRUE),
    pred_ssta = mean(pred_ssta, na.rm = TRUE),
    .groups = "drop"
  )

```


# New shiny app 

without bioregions, new features

```{r ui}
new_ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      id = "tabs",
      menuItem("Introduction", tabName = "introduction", icon = icon("info-circle")),
      menuItem("Map",          tabName = "map",          icon = icon("globe")),
      menuItem("ENSO and Temp",tabName = "enso_temp",     icon = icon("chart-line")),
      menuItem("Predictions",  tabName = "prediction",   icon = icon("chart-bar"))
    )
  ),
  dashboardBody(
    tabItems(
      # ─── Introduction ─────────────────────────────────────────────────
      tabItem(tabName = "introduction",
        h2("Introduction", align = "center"),
        includeMarkdown("intro_test.md")
      ),

      # ─── Map ─────────────────────────────────────────────────────────
      tabItem(tabName = "map",
        fluidRow(
          column(width = 4,

            # Year slider
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year", "Select Year:",
                min   = min(yearly_temp_avg$year),
                max   = max(yearly_temp_avg$year),
                value = min(yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),

            # Temperature select
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable", "Temperature Variable",
                choices = c(
                  "Mean DHW (°C weeks)"  = "mean_dhw",
                  "Mean SST (°C)"        = "mean_sst",
                  "Mean SSTA (°C)"       = "mean_ssta"
                ), selected = "mean_dhw"
              )
            ),

            # Continental Shelf checkbox (map-specific)
            box(width = NULL, status = "primary", solidHeader = TRUE,
              checkboxGroupInput("shelf_map", "Continental Shelf:",
                choices  = c("Inner", "Mid", "Outer"),
                selected = c("Inner", "Mid", "Outer")
              )
            ),

            # Compare 2 years controls: slider + confirm
            box(width = NULL, status = "info", solidHeader = TRUE,
              div(style = "display:flex; align-items:center;",
                sliderInput("compare_year", NULL,
                  min   = min(yearly_temp_avg$year),
                  max   = max(yearly_temp_avg$year),
                  value = min(yearly_temp_avg$year),
                  step  = 1, sep = "",
                  width = "100%" 
                ),
                actionButton("confirm_compare", "Compare",
                  style = "margin-left:10px;"
                )
              )
            )
          ),

          column(width = 8,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "700px")
            ),
            uiOutput("compare_map")
          )
        )
      ),

      # ─── ENSO + Temp ──────────────────────────────────────────────────
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
            plotlyOutput("soi_plot", height = "300px")
          )
        ),
        fluidRow(
          column(width = 4,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("temp_year", "Select Year for Plots:",
                min   = min(monthly_temp$year),
                max   = max(monthly_temp$year),
                value = min(monthly_temp$year),
                step  = 1, sep = ""
              ),
              selectInput("monthly_variable", "Temperature Variable:",
                choices = c(
                  "Mean DHW (°C weeks)"  = "mean_dhw",
                  "Mean SST (°C)"        = "mean_sst",
                  "Mean SSTA (°C)"       = "mean_ssta"
                ), selected = "mean_dhw"
              ),
              checkboxGroupInput("shelf_selection", "Select shelf(s) to display:",
                choices  = c("Inner" = "I", "Mid" = "M", "Outer" = "O"),
                selected = c("I", "M", "O")
              )
            )
          ),
          column(width = 8,
            box(title = "Monthly Mean Temperature for Selected Year", width = NULL,
              status = "primary", solidHeader = TRUE,
              plotlyOutput("temp_monthly_plot", height = "300px")
            )
          )
        )
      ),

      # ─── Predictions ────────────────────────────────────────────────────
      tabItem(tabName = "prediction",
        fluidRow(
          column(12,
            h3("Correlation Heatmap"),
            plotlyOutput("correlation_heatmap")
          )
        ),
        fluidRow(
          column(width = 4,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year_pred", "Select Year:",
                min   = min(gam_yearly_temp_avg$year),
                max   = max(gam_yearly_temp_avg$year),
                value = min(gam_yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable_pred", "Temperature Variable",
                choices = c(
                  "Mean DHW (°C weeks)"  = "mean_dhw",
                  "Mean SST (°C)"        = "mean_sst",
                  "Mean SSTA (°C)"       = "mean_ssta"
                ), selected = "mean_dhw"
              )
            ),
            # Continental Shelf checkbox for predictions
            box(width = NULL, status = "primary", solidHeader = TRUE,
              checkboxGroupInput("shelf_pred", "Continental Shelf pred:",
                choices  = c("Inner", "Mid", "Outer"),
                selected = c("Inner", "Mid", "Outer")
              )
            ),
            box(width = NULL, status = "info", solidHeader = TRUE,
              div(style = "display:flex; align-items:center;",
                sliderInput("compare_year_pred", NULL,
                  min   = min(gam_yearly_temp_avg$year),
                  max   = max(gam_yearly_temp_avg$year),
                  value = min(gam_yearly_temp_avg$year),
                  step  = 1, sep = "",
                  width = "100%"
                ),
                actionButton("confirm_compare_pred", "Compare",
                  style = "margin-left:10px;"
                )
              )
            )
          ),
          column(width = 8,
            uiOutput("predicted_map_ui"),
            uiOutput("actual_map_ui")
          )
        )
      )
    )
  )
)
```


```{r server}
new_server <- function(input, output, session) {
  shelf4326 <- st_transform(shelf_sf, 4326)

  # comparison for map
  comp_year_map <- reactiveVal(NULL)
  observeEvent(input$year, comp_year_map(NULL), ignoreInit = TRUE)
  observeEvent(input$confirm_compare, {
    comp_year_map(input$compare_year)
    showModal(modalDialog("Compared map is displayed below", footer = modalButton("OK")))
  })

  output$map <- renderLeaflet({
    req(input$year, input$variable)
    df1 <- yearly_temp_avg %>%
      filter(year == input$year) %>%
      mutate(val = .data[[input$variable]],
             popup = paste0(switch(input$variable,
                                   mean_dhw  = "DHW (°C weeks): ",
                                   mean_sst  = "SST (°C): ",
                                   mean_ssta = "SSTA (°C): "),
                            round(val, 2)))
    pal <- colorNumeric(viridis(100), domain = df1$val)

    m1 <- leaflet(df1) %>%
      clearShapes() %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(radius = 3, stroke = FALSE, fillOpacity = 0.7,
                       color = ~pal(val), popup = ~popup) %>%
      addLegend(position = "topright", pal = pal, values = df1$val,
                title = switch(input$variable,
                               mean_dhw  = "Mean DHW (°C weeks)",
                               mean_sst  = "Mean SST (°C)",
                               mean_ssta = "Mean SSTA (°C)"),
                opacity = 0.8)

    if ("Inner" %in% input$shelf_map) {
      m1 <- m1 %>% addPolygons(data = filter(shelf4326, shelf_class == "Inner"),
                               fillColor = "orange", color = "orange",
                               weight = 2, opacity = 1, fillOpacity = 0.2,
                               group = "Inner")
    }
    if ("Mid" %in% input$shelf_map) {
      m1 <- m1 %>% addPolygons(data = filter(shelf4326, shelf_class == "Mid"),
                               fillColor = "lightgreen", color = "lightgreen",
                               weight = 1, opacity = 0.5, fillOpacity = 0.2,
                               group = "Mid")
    }
    if ("Outer" %in% input$shelf_map) {
      m1 <- m1 %>% addPolygons(data = filter(shelf4326, shelf_class == "Outer"),
                               fillColor = "lightblue", color = "lightblue",
                               weight = 1, opacity = 0.5, fillOpacity = 0.2,
                               group = "Outer")
    }

    m1 %>% addLegend(position = "bottomright",
                     colors = c("orange","lightgreen","lightblue"),
                     labels = c("Inner Shelf","Mid Shelf","Outer Shelf"),
                     title = "Shelf Zone", opacity = 0.5)
  })

  output$compare_map <- renderUI({
    req(comp_year_map())
    box(title = paste("Comparison Map — Year:", comp_year_map()),
        width = NULL, status = "primary", solidHeader = TRUE,
        leafletOutput("map2", height = "700px"))
  })
  output$map2 <- renderLeaflet({
    req(comp_year_map(), input$variable)
    df2 <- yearly_temp_avg %>%
      filter(year == comp_year_map()) %>%
      mutate(val = .data[[input$variable]],
             popup = paste0(switch(input$variable,
                                   mean_dhw  = "DHW: ",
                                   mean_sst  = "SST: ",
                                   mean_ssta = "SSTA: "),
                            round(val, 2)))
    pal2 <- colorNumeric(viridis(100), domain = df2$val)

    m2 <- leaflet(df2) %>% addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(radius = 3, stroke = FALSE, fillOpacity = 0.7,
                       color = ~pal2(val), popup = ~popup) %>%
      addLegend(position = "topright", pal = pal2, values = df2$val,
                title = switch(input$variable,
                               mean_dhw  = "Mean DHW (°C weeks)",
                               mean_sst  = "Mean SST (°C)",
                               mean_ssta = "Mean SSTA (°C)"),
                opacity = 0.8)

    if ("Inner" %in% input$shelf_map) {
      m2 <- m2 %>% addPolygons(data = filter(shelf4326, shelf_class == "Inner"),
                               fillColor = "orange", color = "orange",
                               weight = 1, opacity = 0.5, fillOpacity = 0.2)
    }
    if ("Mid" %in% input$shelf_map) {
      m2 <- m2 %>% addPolygons(data = filter(shelf4326, shelf_class == "Mid"),
                               fillColor = "lightgreen", color = "lightgreen",
                               weight = 1, opacity = 0.5, fillOpacity = 0.2)
    }
    if ("Outer" %in% input$shelf_map) {
      m2 <- m2 %>% addPolygons(data = filter(shelf4326, shelf_class == "Outer"),
                               fillColor = "lightblue", color = "lightblue",
                               weight = 1, opacity = 0.5, fillOpacity = 0.2)
    }

    m2 %>% addLegend(position = "bottomright",
                     colors = c("orange","lightgreen","lightblue"),
                     labels = c("Inner Shelf","Mid Shelf","Outer Shelf"),
                     title = "Shelf Zone", opacity = 0.5)
  })

  # ─── ENSO + Temp ─────────────────────────────────────────────────────────
  # SOI anomaly plot
  output$soi_plot <- renderPlotly({
    req(input$temp_year)
    start_date <- as.Date(paste0(input$temp_year, "-01-01"))
    end_date   <- as.Date(paste0(input$temp_year, "-12-31"))

    soi_strict <- soi %>%
      mutate(
        date_end = lead(date),
        soi_end  = lead(soi_anomaly),
        phase    = ifelse(soi_anomaly > 0, "El Niño", "La Niña")
      ) %>%
      filter(!is.na(date_end))

    p1 <- ggplot(soi_strict,
                 aes(x = date, y = soi_anomaly, xend = date_end, yend = soi_end)) +
      geom_segment(aes(color = phase), linewidth = 0.6) +
      scale_color_manual(values = c("El Niño" = "red", "La Niña" = "blue"),
                         name = "ENSO Phase") +
      geom_hline(yintercept = 0, color = "black", linewidth = 0.2) +
      gghighlight(
        date >= start_date & date <= end_date,
        unhighlighted_params = list(color = "gray80"),
        use_group_by = FALSE
      ) +
      theme_minimal() +
      labs(
        x     = "Date",
        y     = "SOI Anomaly",
        title = paste("SOI Anomaly —", input$temp_year, "highlighted")
      )

    ggplotly(p1)
  })

  # Monthly mean temp plot
  output$temp_monthly_plot <- renderPlotly({
    req(input$temp_year, input$monthly_variable, input$shelf_selection)

    y_label <- c(
      mean_dhw  = "Degree Heating Weeks (°C weeks)",
      mean_sst  = "Sea Surface Temperature (°C)",
      mean_ssta = "Sea Surface Temperature Anomaly (°C)"
    )[[input$monthly_variable]]

    plot_data <- monthly_temp %>%
      filter(year == input$temp_year, shelf %in% input$shelf_selection)

    p2 <- ggplot(plot_data, aes(
      x      = month,
      y      = .data[[input$monthly_variable]],
      colour = shelf,
      group  = shelf
    )) +
      geom_line(size = 0.8) +
      geom_point(size = 2) +
      scale_colour_manual(
        name   = "Shelf",
        values = c("I" = "#1b9e77", "M" = "#d95f02", "O" = "#7570b3"),
        labels = c("I" = "Inner", "M" = "Mid", "O" = "Outer")
      ) +
      geom_hline(yintercept = 0, color = "black", size = 0.2) +
      labs(
        x     = "Month",
        y     = y_label,
        title = paste("Monthly", toupper(input$monthly_variable),
                      "in", input$temp_year, "by Shelf")
      ) +
      theme_minimal(base_size = 10) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1),
            legend.position = "bottom")

    ggplotly(p2) %>%
      layout(
        margin = list(b = 80, l = 60),
        legend = list(orientation = "h", x = 0.2, y = -0.2),
        autosize = TRUE
      ) %>%
      config(responsive = TRUE)
  })

  # ─── Predictions ─────────────────────────────────────────────────────────
  # Correlation heatmap
  output$correlation_heatmap <- renderPlotly({
    cor_data <- all_data %>%
      select(-month) %>%
      mutate(month = lubridate::month(date)) %>%
      select(mean_dhw, mean_sst, mean_ssta, soi_anomaly, month, year) %>%
      na.omit()

    cor_mat <- cor(cor_data)
    melted_cor_matrix <- reshape2::melt(cor_mat)
    melted_cor_matrix <- melted_cor_matrix[
      melted_cor_matrix$Var1 != melted_cor_matrix$Var2 &
      as.numeric(melted_cor_matrix$Var1) < as.numeric(melted_cor_matrix$Var2),
    ]

    corr_plot <- ggplot(melted_cor_matrix, aes(Var1, Var2, fill = value)) +
      geom_tile(color = "white") +
      scale_fill_gradientn(colors = RColorBrewer::brewer.pal(11, "RdYlBu"),
                           limits = c(-1, 1)) +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
      coord_fixed() +
      labs(x = "", y = "")

    ggplotly(corr_plot)
  })

  # Predicted‐map UI
  output$predicted_map_ui <- renderUI({
    req(input$year)
    box(
      title       = paste("Predicted Temperature Map — Year:", input$year),
      width       = NULL,
      status      = "primary",
      solidHeader = TRUE,
      leafletOutput("predicted_map", height = "700px")
    )
  })

  # Predicted Temperature Map
  output$predicted_map <- renderLeaflet({
    req(input$year, input$variable)
    df3 <- gam_yearly_temp_avg %>%
      filter(year == input$year) %>%
      mutate(
        val   = .data[[input$variable]],
        popup = paste0(
          switch(input$variable,
            pred_dhw  = "Predicted DHW (°C weeks): ",
            pred_sst  = "Predicted SST (°C): ",
            pred_ssta = "Predicted SSTA (°C): "
          ),
          round(val, 2)
        )
      )
    pal3 <- colorNumeric(viridis(100), domain = df3$val)

    m3 <- leaflet(df3) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        color       = ~pal3(val),
        popup       = ~popup
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal3,
        values   = df3$val,
        title = switch(input$variable,
          mean_dhw  = "Mean DHW (°C weeks)",
          mean_sst  = "Mean SST (°C)",
          mean_ssta = "Mean SSTA (°C)"
        ),
        opacity = 0.8
      )

    if ("Inner" %in% input$shelf_pred) {
      m3 <- m3 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Inner"),
        fillColor  = "orange", color = "orange",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Mid" %in% input$shelf_pred) {
      m3 <- m3 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Mid"),
        fillColor  = "lightgreen", color = "lightgreen",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Outer" %in% input$shelf_pred) {
      m3 <- m3 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Outer"),
        fillColor  = "lightblue", color = "lightblue",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    m3
  })

  # Actual‐map UI
  output$actual_map_ui <- renderUI({
    req(comp_year())
    box(
      title       = paste("Actual Temperature Map — Year:", comp_year()),
      width       = NULL,
      status      = "primary",
      solidHeader = TRUE,
      leafletOutput("actual_map", height = "700px")
    )
  })

  # Actual Temperature Map
  output$actual_map <- renderLeaflet({
    req(comp_year(), input$variable)
    df4 <- gam_yearly_temp_avg %>%
      filter(year == comp_year()) %>%
      mutate(
        val   = .data[[input$variable]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "Actual DHW: ",
            mean_sst  = "Actual SST: ",
            mean_ssta = "Actual SSTA: "
          ),
          round(val, 2)
        )
      )
    pal4 <- colorNumeric(viridis(100), domain = df4$val)

    m4 <- leaflet(df4) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        color       = ~pal4(val),
        popup       = ~popup
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal4,
        values   = df4$val,
        title    = switch(input$variable,
          mean_dhw  = "Mean DHW (°C weeks)",
          mean_sst  = "Mean SST (°C)",
          mean_ssta = "Mean SSTA (°C)"
        ),
        opacity = 0.8
      )

    if ("Inner" %in% input$shelf_pred) {
      m4 <- m4 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Inner"),
        fillColor  = "orange", color = "orange",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Mid" %in% input$shelf_pred) {
      m4 <- m4 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Mid"),
        fillColor  = "lightgreen", color = "lightgreen",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Outer" %in% input$shelf_pred) {
      m4 <- m4 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Outer"),
        fillColor  = "lightblue", color = "lightblue",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    m4
  })
}
```


```{r}
new_server <- function(input, output, session) {
  # ─── Prepare shelf data ──────────────────────────────────────────────────────
  shelf4326 <- st_transform(shelf_sf, 4326)

  # ─── Map comparison reactive ─────────────────────────────────────────────────
  comp_year_map <- reactiveVal(NULL)
  observeEvent(input$year, comp_year_map(NULL), ignoreInit = TRUE)
  observeEvent(input$confirm_compare, {
    comp_year_map(input$compare_year)
    showModal(modalDialog(
      h4("Compared map is displayed below"),
      footer = modalButton("Confirm"),
      easyClose = FALSE
    ))
  })

  # ─── Main map ────────────────────────────────────────────────────────────────
  output$map <- renderLeaflet({
    req(input$year, input$variable)
    df1 <- yearly_temp_avg %>%
      filter(year == input$year) %>%
      mutate(
        val   = .data[[input$variable]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "DHW (°C weeks): ",
            mean_sst  = "SST (°C): ",
            mean_ssta = "SSTA (°C): "
          ),
          round(val, 2)
        )
      )
    pal <- colorNumeric(viridis(100), domain = df1$val)

    m1 <- leaflet(df1) %>%
      clearShapes() %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        color       = ~pal(val),
        popup       = ~popup
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal,
        values   = df1$val,
        title    = switch(input$variable,
          mean_dhw  = "Mean DHW (°C weeks)",
          mean_sst  = "Mean SST (°C)",
          mean_ssta = "Mean SSTA (°C)"
        ),
        opacity = 0.8
      )

    if ("Inner" %in% input$shelf_map) {
      m1 <- m1 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Inner"),
        fillColor  = "orange", color = "orange",
        weight     = 2, opacity = 1, fillOpacity = 0.2,
        group      = "Inner"
      )
    }
    if ("Mid" %in% input$shelf_map) {
      m1 <- m1 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Mid"),
        fillColor  = "lightgreen", color = "lightgreen",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2,
        group      = "Mid"
      )
    }
    if ("Outer" %in% input$shelf_map) {
      m1 <- m1 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Outer"),
        fillColor  = "lightblue", color = "lightblue",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2,
        group      = "Outer"
      )
    }

    m1 %>% addLegend(
      position = "bottomright",
      colors   = c("orange", "lightgreen", "lightblue"),
      labels   = c("Inner Shelf", "Mid Shelf", "Outer Shelf"),
      title    = "Shelf Zone",
      opacity  = 0.5
    )
  })

  # ─── Comparison map UI & map2 ───────────────────────────────────────────────
  output$compare_map <- renderUI({
    req(comp_year_map())
    box(
      title       = paste("Comparison Map — Year:", comp_year_map()),
      width       = NULL,
      status      = "primary",
      solidHeader = TRUE,
      leafletOutput("map2", height = "700px")
    )
  })
  output$map2 <- renderLeaflet({
    req(comp_year_map(), input$variable)
    df2 <- yearly_temp_avg %>%
      filter(year == comp_year_map()) %>%
      mutate(
        val   = .data[[input$variable]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "DHW: ",
            mean_sst  = "SST: ",
            mean_ssta = "SSTA: "
          ),
          round(val, 2)
        )
      )
    pal2 <- colorNumeric(viridis(100), domain = df2$val)

    m2 <- leaflet(df2) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        color       = ~pal2(val),
        popup       = ~popup
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal2,
        values   = df2$val,
        title    = switch(input$variable,
          mean_dhw  = "Mean DHW (°C weeks)",
          mean_sst  = "Mean SST (°C)",
          mean_ssta = "Mean SSTA (°C)"
        ),
        opacity = 0.8
      )

    if ("Inner" %in% input$shelf_map) {
      m2 <- m2 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Inner"),
        fillColor  = "orange", color = "orange",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Mid" %in% input$shelf_map) {
      m2 <- m2 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Mid"),
        fillColor  = "lightgreen", color = "lightgreen",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Outer" %in% input$shelf_map) {
      m2 <- m2 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Outer"),
        fillColor  = "lightblue", color = "lightblue",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }

    m2 %>% addLegend(
      position = "bottomright",
      colors   = c("orange", "lightgreen", "lightblue"),
      labels   = c("Inner Shelf", "Mid Shelf", "Outer Shelf"),
      title    = "Shelf Zone",
      opacity  = 0.5
    )
  })

  # ─── ENSO + Temp (unchanged) ────────────────────────────────────────────────
  output$soi_plot <- renderPlotly({
    req(input$temp_year)
    start_date <- as.Date(paste0(input$temp_year, "-01-01"))
    end_date   <- as.Date(paste0(input$temp_year, "-12-31"))

    soi_strict <- soi %>%
      mutate(
        date_end = lead(date),
        soi_end  = lead(soi_anomaly),
        phase    = ifelse(soi_anomaly > 0, "El Niño", "La Niña")
      ) %>%
      filter(!is.na(date_end))

    p1 <- ggplot(soi_strict,
                 aes(x = date, y = soi_anomaly, xend = date_end, yend = soi_end)) +
      geom_segment(aes(color = phase), linewidth = 0.6) +
      scale_color_manual(values = c("El Niño" = "red", "La Niña" = "blue"),
                         name = "ENSO Phase") +
      geom_hline(yintercept = 0, color = "black", linewidth = 0.2) +
      gghighlight(
        date >= start_date & date <= end_date,
        unhighlighted_params = list(color = "gray80"),
        use_group_by = FALSE
      ) +
      theme_minimal() +
      labs(
        x     = "Date",
        y     = "SOI Anomaly",
        title = paste("SOI Anomaly —", input$temp_year, "highlighted")
      )

    ggplotly(p1)
  })

  output$temp_monthly_plot <- renderPlotly({
    req(input$temp_year, input$monthly_variable, input$shelf_selection)

    y_label <- c(
      mean_dhw  = "Degree Heating Weeks (°C weeks)",
      mean_sst  = "Sea Surface Temperature (°C)",
      mean_ssta = "Sea Surface Temperature Anomaly (°C)"
    )[[input$monthly_variable]]

    plot_data <- monthly_temp %>%
      filter(year == input$temp_year, shelf %in% input$shelf_selection)

    p2 <- ggplot(plot_data, aes(
      x      = month,
      y      = .data[[input$monthly_variable]],
      colour = shelf,
      group  = shelf
    )) +
      geom_line(size = 0.8) +
      geom_point(size = 2) +
      scale_colour_manual(
        name   = "Shelf",
        values = c("I" = "#1b9e77", "M" = "#d95f02", "O" = "#7570b3"),
        labels = c("I" = "Inner", "M" = "Mid", "O" = "Outer")
      ) +
      geom_hline(yintercept = 0, color = "black", size = 0.2) +
      labs(
        x     = "Month",
        y     = y_label,
        title = paste("Monthly", toupper(input$monthly_variable),
                      "in", input$temp_year, "by Shelf")
      ) +
      theme_minimal(base_size = 10) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1),
            legend.position = "bottom")

    ggplotly(p2) %>%
      layout(
        margin = list(b = 80, l = 60),
        legend = list(orientation = "h", x = 0.2, y = -0.2),
        autosize = TRUE
      ) %>%
      config(responsive = TRUE)
  })

  # ─── Correlation heatmap (unchanged) ────────────────────────────────────────
  output$correlation_heatmap <- renderPlotly({
    cor_data <- all_data %>%
      select(-month) %>%
      mutate(month = lubridate::month(date)) %>%
      select(mean_dhw, mean_sst, mean_ssta, soi_anomaly, month, year) %>%
      na.omit()

    cor_mat <- cor(cor_data)
    melted_cor_matrix <- reshape2::melt(cor_mat)
    melted_cor_matrix <- melted_cor_matrix[
      melted_cor_matrix$Var1 != melted_cor_matrix$Var2 &
      as.numeric(melted_cor_matrix$Var1) < as.numeric(melted_cor_matrix$Var2),
    ]

    corr_plot <- ggplot(melted_cor_matrix, aes(Var1, Var2, fill = value)) +
      geom_tile(color = "white") +
      scale_fill_gradientn(colors = RColorBrewer::brewer.pal(11, "RdYlBu"),
                           limits = c(-1, 1)) +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
      coord_fixed() +
      labs(x = "", y = "")

    ggplotly(corr_plot)
  })

  # ─── Predictions comparison reactive ────────────────────────────────────────
  comp_year_pred <- reactiveVal(NULL)
  observeEvent(input$year_pred, comp_year_pred(NULL), ignoreInit = TRUE)
  observeEvent(input$confirm_compare_pred, {
    comp_year_pred(input$compare_year_pred)
    showModal(modalDialog(
      h4("Compared map is displayed below"),
      footer = modalButton("Confirm"),
      easyClose = FALSE
    ))
  })

  # ─── Predicted map UI ──────────────────────────────────────────────────────
  output$predicted_map_ui <- renderUI({
    req(input$year_pred)
    box(
      title       = paste("Predicted Temperature Map — Year:", input$year_pred),
      width       = NULL,
      status      = "primary",
      solidHeader = TRUE,
      leafletOutput("predicted_map", height = "700px")
    )
  })

  # ─── Predicted Temperature Map ─────────────────────────────────────────────
  output$predicted_map <- renderLeaflet({
    req(input$year_pred, input$variable_pred)
    df3 <- gam_yearly_temp_avg %>%
      filter(year == input$year_pred) %>%
      mutate(
        val   = .data[[input$variable_pred]],
        popup = paste0(
          switch(input$variable_pred,
            pred_dhw  = "Predicted DHW (°C weeks): ",
            pred_sst  = "Predicted SST (°C): ",
            pred_ssta = "Predicted SSTA (°C): "
          ),
          round(val, 2)
        )
      )
    pal3 <- colorNumeric(viridis(100), domain = df3$val)

    m3 <- leaflet(df3) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        color       = ~pal3(val),
        popup       = ~popup
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal3,
        values   = df3$val,
        title    = switch(input$variable_pred,
          pred_dhw  = "Predicted DHW (°C weeks)",
          pred_sst  = "Predicted SST (°C)",
          pred_ssta = "Predicted SSTA (°C)"
        ),
        opacity = 0.8
      )

    if ("Inner" %in% input$shelf_pred) {
      m3 <- m3 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Inner"),
        fillColor  = "orange", color = "orange",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Mid" %in% input$shelf_pred) {
      m3 <- m3 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Mid"),
        fillColor  = "lightgreen", color = "lightgreen",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Outer" %in% input$shelf_pred) {
      m3 <- m3 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Outer"),
        fillColor  = "lightblue", color = "lightblue",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }

    m3
  })

  # ─── Actual map UI ─────────────────────────────────────────────────────────
  output$actual_map_ui <- renderUI({
    req(comp_year_pred())
    box(
      title       = paste("Actual Temperature Map — Year:", comp_year_pred()),
      width       = NULL,
      status      = "primary",
      solidHeader = TRUE,
      leafletOutput("actual_map", height = "700px")
    )
  })

  # ─── Actual Temperature Map ────────────────────────────────────────────────
  output$actual_map <- renderLeaflet({
    req(comp_year_pred(), input$variable_pred)
    df4 <- gam_yearly_temp_avg %>%
      filter(year == comp_year_pred()) %>%
      mutate(
        val   = .data[[input$variable_pred]],
        popup = paste0(
          switch(input$variable_pred,
            pred_dhw  = "Actual DHW: ",
            pred_sst  = "Actual SST: ",
            pred_ssta = "Actual SSTA: "
          ),
          round(val, 2)
        )
      )
    pal4 <- colorNumeric(viridis(100), domain = df4$val)

    m4 <- leaflet(df4) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        color       = ~pal4(val),
        popup       = ~popup
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal4,
        values   = df4$val,
        title    = switch(input$variable_pred,
          pred_dhw  = "Mean DHW (°C weeks)",
          pred_sst  = "Mean SST (°C)",
          pred_ssta = "Mean SSTA (°C)"
        ),
        opacity = 0.8
      )

    if ("Inner" %in% input$shelf_pred) {
      m4 <- m4 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Inner"),
        fillColor  = "orange", color = "orange",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Mid" %in% input$shelf_pred) {
      m4 <- m4 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Mid"),
        fillColor  = "lightgreen", color = "lightgreen",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Outer" %in% input$shelf_pred) {
      m4 <- m4 %>% addPolygons(
        data       = filter(shelf4326, shelf_class == "Outer"),
        fillColor  = "lightblue", color = "lightblue",
        weight     = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }

    m4
  })
}
```


```{r}
shinyApp(new_ui, new_server)


```




