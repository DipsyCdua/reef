---
title: "thursday week 12 shiny app"
format: html
editor: source
---
```{r setup, echo=FALSE}
library(shiny)
library(shinydashboard)
library(dplyr)
library(sf)
library(leaflet)
library(stringr)
library(lubridate)
library(readr)
library(tidyr)
library(viridis)
library(plotly)
library(gghighlight)
library(vroom)
```

# Data Summaries & Preprocessing

## Data


### faster data load ver

```{r}
all_data <- vroom(
  file      = "./NEW_fixed_reef_full.csv",
  delim     = ",",
  col_types = cols(date = col_date(format = ""))  # parse date up front
) %>%
  mutate(
    year  = year(date),
    month = month(date, label = TRUE, abbr = TRUE)
  )

#----SOI INDEX----

soi <- vroom(
  file      = "./soi_index_py.csv",
  delim     = ",",
  col_types = cols(Date = col_date(format = ""))  # parse your “Date” column
) %>%
  rename(date = Date) %>%       # rename for consistency
  mutate(year = year(date)) %>%
  filter(year >= 1987, year <= 2024) %>%
  arrange(date) %>%
  select(date, soi_anomaly)
```


### old ver

```{r dat, message=FALSE, warning=FALSE}
#----REEF DATA----

all_data_csv <- read.csv("NEW_reef_full.csv")

# add year and month columns
all_data <- all_data_csv |>
  mutate(date = as.Date(date)) |>
  mutate(year = year(date), month = month(as.Date(date), label = TRUE, abbr = TRUE))

# soi
soi <- read.csv("/Users/imanelattab/Desktop/DATA3888/reef_dbs/soi_index_py.csv") |>
  mutate(date = as.Date(Date),
         year = year(date)) |>
  filter(year >= 1987 & year <= 2024) |>
  arrange(date) |>
  select(date, soi_anomaly)
```

## Summarise Temperature Variables

Original data was daily temperature data including daily DHW, SST and SSTA for every point in the GBR. All temperature averages are calculated on this data.

1. Yearly average for every point on GBR

2. Monthly Average across the entire GBR

```{r temp-summary, message=FALSE}
# ALL TEMPERATURE VARIABLES yearly avg for every point on GBR
yearly_temp_avg <- all_data |>
  group_by(year, lon, lat) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE),
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  )


# ALL TEMPERATURE VARIABLES monthly avg across entire GBR
monthly_temp <- all_data |>
  group_by(year, month) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE), 
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop")
```

## GBR Boundaries

1. Bioregions (reefal and non-reefal marine area)

Although this was not a geospatial variable considered in our experimental research and investigation, it is a helpful overlay to have on the map for the stakeholder.

2. Continental Shelf (Inner, Mid, Outer)

```{r bound, message=FALSE}
#----BOUNDARIES----
# 1. bioregions overlay data
bioregions <- st_read("./Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074-20250518T100754Z-1-001/Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074/Great_Barrier_Reef_Marine_Park_Marine_Bioregions.shp")
# add reefal status & transform
bioregions_sf <- bioregions |> 
  mutate(
    reef_status = factor(REEF_ID, levels = c(0, 1), labels = c("Non-Reefal", "Reefal"))
  )

# look at bioregions
ggplot(bioregions_sf) +
  geom_sf(aes(fill = REEF_ID), colour = NA) +
  coord_sf()

# not using anymore
# # 2. management zones
# manage_sf <- st_read("D:/R_studio_working_dir/DATA3888_group/reef/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161-20250518T101033Z-1-001/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161/Great_Barrier_Reef_Marine_Park_Management_Areas.shp")

# 3. shelf zones (will complete this before monday week 12, for now use management zones in the models)
shelf_sf <- st_read("./shelf_boundaries-20250523T055421Z-1-001/shelf_boundaries/shelf_zones_dissolved.shp")
st_crs(shelf_sf)

# check
any(!st_is_valid(shelf_sf)) # good!

# rename shelf class
shelf_sf <- dplyr::rename(shelf_sf, shelf_class = shlf_cl)

# look at shelf
# ggplot(shelf_sf) +
#   geom_sf(aes(fill = shelf_class), colour = NA) +
#   coord_sf()

# for the map, extract the lon and lat needed for it to be zoomed in at an optimal point

unique_coords <- all_data |>
    dplyr::select(lon, lat) |>
    dplyr::distinct()

unique_sf <- sf::st_as_sf(unique_coords, coords = c("lon", "lat"), crs = 4326)


# Get bounding box from your sf object
bbox <- st_bbox(unique_sf)

# Extract coordinates
unique_coords <- all_data |>
  dplyr::select(lon, lat) |>
  dplyr::distinct()

unique_sf <- st_as_sf(unique_coords, coords = c("lon", "lat"), crs = 4326)
```

# New shiny app 

without bioregions, new features

```{r}
new_ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      id = "tabs",
      menuItem("Introduction", tabName = "introduction", icon = icon("info-circle")),
      menuItem("Map",          tabName = "map",          icon = icon("globe")),
      menuItem("ENSO and Temp",tabName = "enso_temp",     icon = icon("chart-line")),
      menuItem("Relation",     tabName = "relation",      icon = icon("chart-bar"))
    )
  ),
  dashboardBody(
    tabItems(
      # ─── Introduction ─────────────────────────────────────────────────
      tabItem(tabName = "introduction",
        h2("Introduction", align = "center"),
        includeMarkdown("intro_test.md")
      ),

      # ─── Map ─────────────────────────────────────────────────────────
      tabItem(tabName = "map",
        fluidRow(
          column(width = 4,

            # Year slider
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year", "Select Year:",
                min   = min(yearly_temp_avg$year),
                max   = max(yearly_temp_avg$year),
                value = min(yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),

            # Temeprature select
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable", "Temperature Variable",
                choices = c(
                  "Mean DHW"  = "mean_dhw",
                  "Mean SST"  = "mean_sst",
                  "Mean SSTA" = "mean_ssta"
                ), selected = "mean_dhw"
              )
            ),

            # Shelf
            box(width = NULL, status = "primary", solidHeader = TRUE,
                checkboxGroupInput("shelf_zones", "Continental Shelf:",
                choices  = c("Inner", "Mid", "Outer"),
                selected = c("Inner", "Mid", "Outer")
                )
              ),

            # Compare controls: slider + confirm
            box(width = NULL, status = "info", solidHeader = TRUE,
              div(style = "display:flex; align-items:center;",
                sliderInput("compare_year", NULL,
                  min   = min(yearly_temp_avg$year),
                  max   = max(yearly_temp_avg$year),
                  value = min(yearly_temp_avg$year),
                  step  = 1, sep = "",
                  width = "100%" # changed so we can see all years
                ),
                actionButton("confirm_compare", "Compare",
                  style = "margin-left:10px;"
                )
              )
            )
          ),

          column(width = 8,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "700px")
            ),
            # placeholder for the comparison map
            uiOutput("compare_map")
          )
        )
      ),

      # ─── ENSO + Temp ──────────────────────────────────────────────────
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
            plotlyOutput("soi_plot", height = "300px")
          )
        ),
        fluidRow(
          column(width = 3,
            box(width = NULL, status = "primary", solidHeader = TRUE,
            sliderInput("temp_year", "Select Year for Plots:",
              min   = min(monthly_temp$year),
              max   = max(monthly_temp$year),
              value = min(monthly_temp$year),
              step  = 1, sep = ""
            ),
            selectInput("monthly_variable", "Temperature Variable:",
              choices = c(
                "Mean DHW"  = "mean_dhw",
                "Mean SST"  = "mean_sst",
                "Mean SSTA" = "mean_ssta"
              ), selected = "mean_dhw"
            )
          )
        ),
          column(width = 9,
            box(title = "Monthly Mean Temperature for Selected Year", width = NULL,
              status = "primary", solidHeader = TRUE,
              plotlyOutput("temp_monthly_plot", height = "300px")
            )
          )
        )
      ),

      # ─── Relation ────────────────────────────────────────────────────
      tabItem(tabName = "relation",
        h2("Relation Plot", align = "center"),
        p("Put your relation-analysis content or placeholder here.")
      )
    )
  )
)
```

```{r}
new_server <- function(input, output, session) {

  # Reproject boundaries on the fly
  shelf4326 <- st_transform(shelf_sf, 4326)

  # Hold compare year
  comp_year <- reactiveVal(NULL)
  observeEvent(input$year,        comp_year(NULL),        ignoreInit = TRUE)
  observeEvent(input$confirm_compare, {
    # store the compare year
    comp_year(input$compare_year)
  
    # immediately pop up a modal to tell them the map is below
    showModal(modalDialog(
      h4("Compared map is displayed below"),
      footer = modalButton("Confirm"),
      easyClose = FALSE
    ))
  })

  # Make a unique sf object from all_data (unique GBR points)
  unique_coords <- all_data |>
    dplyr::select(lon, lat) |>
    dplyr::distinct()

  unique_sf <- sf::st_as_sf(unique_coords, coords = c("lon", "lat"), crs = 4326)

  # Get a bounding box
  bbox <- sf::st_bbox(unique_sf)
  
  # Calculate centres for setView
  center_lng <- (bbox["xmin"] + bbox["xmax"]) / 2
  center_lat <- (bbox["ymin"] + bbox["ymax"]) / 2
  
  # Main map
  output$map <- renderLeaflet({
  req(input$year, input$variable)
  df1 <- yearly_temp_avg %>%
    filter(year == input$year) %>%
    mutate(
      val = .data[[input$variable]],
      popup = paste0(
        switch(input$variable,
          mean_dhw = "DHW: ",
          mean_sst = "SST: ",
          mean_ssta = "SSTA: "
        ), round(val, 2)
      )
    )
  pal <- colorNumeric(viridis(100), domain = df1$val)
  
  m1 <- leaflet(df1) %>%
    addProviderTiles("CartoDB.Positron") %>%
    addCircleMarkers(
      radius = 3, stroke = FALSE, fillOpacity = 0.7,
      color = ~pal(val), popup = ~popup
    ) %>%
    addLegend(
      position = "topright", pal = pal, values = df1$val,
      title = switch(input$variable,
        mean_dhw = "Mean DHW",
        mean_sst = "Mean SST",
        mean_ssta = "Mean SSTA"
      ), opacity = 0.8
    )
  
    # Add shelf overlays
    if ("Inner" %in% input$shelf_zones) {
      m1 <- m1 %>% addPolygons(
        data = filter(shelf4326, shelf_class == "Inner"),
        fillColor = "orange", color = "orange",
        weight = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Mid" %in% input$shelf_zones) {
      m1 <- m1 %>% addPolygons(
        data = filter(shelf4326, shelf_class == "Mid"),
        fillColor = "darkgreen", color = "darkgreen",
        weight = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Outer" %in% input$shelf_zones) {
      m1 <- m1 %>% addPolygons(
        data = filter(shelf4326, shelf_class == "Outer"),
        fillColor = "lightblue", color = "lightblue",
        weight = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    
    m1 %>% addLegend(
      position = "bottomright",
      colors = c("orange", "darkgreen", "lightblue"),
      labels = c("Inner Shelf", "Mid Shelf", "Outer Shelf"),
      title = "Shelf Zone",
      opacity = 0.5
    )
    })


  # Comparison map UI
  output$compare_map <- renderUI({
    req(comp_year())
    box(title = paste("Comparison Map — Year:", comp_year()),
        width = NULL, status = "primary", solidHeader = TRUE,
        leafletOutput("map2", height = "700px"))
  })

  # Comparison map
  output$map2 <- renderLeaflet({
    req(comp_year(), input$variable)
    df2 <- yearly_temp_avg %>%
      filter(year == comp_year()) %>%
      mutate(
        val   = .data[[ input$variable ]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "DHW: ",
            mean_sst  = "SST: ",
            mean_ssta = "SSTA: "
          ), round(val,2)
        )
      )
    pal2 <- colorNumeric(viridis(100), domain = df2$val)

    m2 <- leaflet(df2) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addCircleMarkers(
        radius = 3, stroke = FALSE, fillOpacity = 0.7,
        color = ~pal2(val), popup = ~popup
      ) %>%
      addLegend(
        position = "topright", pal = pal2, values = df2$val,
        title   = switch(input$variable,
                    mean_dhw  = "Mean DHW",
                    mean_sst  = "Mean SST",
                    mean_ssta = "Mean SSTA"
                  ), opacity = 0.8
      )
  
    # Add shelf overlays
    if ("Inner" %in% input$shelf_zones) {
      m2 <- m2 %>% addPolygons(
        data = filter(shelf4326, shelf_class == "Inner"),
        fillColor = "orange", color = "orange",
        weight = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Mid" %in% input$shelf_zones) {
      m2 <- m2 %>% addPolygons(
        data = filter(shelf4326, shelf_class == "Mid"),
        fillColor = "darkgreen", color = "darkgreen",
        weight = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Outer" %in% input$shelf_zones) {
      m2 <- m2 %>% addPolygons(
        data = filter(shelf4326, shelf_class == "Outer"),
        fillColor = "lightblue", color = "lightblue",
        weight = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    
    m2 %>% addLegend(
      position = "bottomright",
      colors = c("orange", "darkgreen", "lightblue"),
      labels = c("Inner Shelf", "Mid Shelf", "Outer Shelf"),
      title = "Shelf Zone",
      opacity = 0.5
    )
  })
  
  # SOI anomaly plot
  output$soi_plot <- renderPlotly({
    req(input$temp_year)

    # Compute the start/end of the selected year
    start_date <- as.Date(paste0(input$temp_year, "-01-01"))
    end_date   <- as.Date(paste0(input$temp_year, "-12-31"))
    
    # Divide soi data strictly by if it is >0 or <0
    soi_strict <- soi %>%
      mutate(date_end = lead(date),
             soi_end = lead(soi_anomaly),
             colour = ifelse(soi_anomaly > 0, "red", "blue")) %>%
      filter(!is.na(date_end))
    
    soi_strict <- soi %>%
      mutate(date_end = lead(date),
             soi_end = lead(soi_anomaly),
             phase = ifelse(soi_anomaly > 0, "El Niño", "La Niña")) %>%
      filter(!is.na(date_end))

    p1 <- ggplot(soi_strict, aes(x = date, y = soi_anomaly, xend = date_end, yend = soi_end)) +
      geom_segment(aes(color = phase), linewidth = 0.6) +
      
      scale_color_manual(values = c("El Niño" = "red", "La Niña" = "blue"),
                         name = "ENSO Phase") +
      geom_hline(yintercept = 0, color = "black", linewidth = 0.2) +
      gghighlight(
        date >= start_date & date <= end_date,
        unhighlighted_params = list(color = "gray80")
        ) +
      theme_minimal() +
      labs(
        x     = "Date",
        y     = "SOI Anomaly",
        title = paste("SOI Anomaly —", input$temp_year, "highlighted")
      )

    ggplotly(p1)
  })

  # Average Monthly temperature across the GBR
  output$temp_monthly_plot <- renderPlotly({
    req(input$temp_year, input$monthly_variable)
  
    # Dynamic labels
    y_label <- c(
      mean_dhw  = "Degree Heating Weeks (DHW)",
      mean_sst  = "Sea Surface Temperature (SST)",
      mean_ssta = "Sea Surface Temperature Anomaly (SSTA)"
    )[[input$monthly_variable]]
    
    # Filter for selected year
    plot_data <- monthly_temp %>%
      filter(year == input$temp_year)

    # Create plot
    p2 <- ggplot(plot_data, aes(x = month, y = .data[[input$monthly_variable]])) +
      geom_line(group = 1, colour = "#2c7fb8") +
      geom_point(colour = "#2c7fb8") +
      geom_hline(yintercept = 0, color = "black", linewidth = 0.1) +
      labs(
        x = "Month",
        y = y_label,
        title = paste("GBR Monthly", toupper(input$monthly_variable), "in", input$temp_year)
      ) +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))

    ggplotly(p2) %>%
      layout(yaxis = list(title = y_label))
  })

}
```


```{r}
shinyApp(new_ui, new_server)
```




