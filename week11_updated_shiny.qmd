---
title: "shiny app"
format: html
editor: source
---
```{r setup, echo=FALSE}
library(shiny)
library(shinydashboard)
library(dplyr)
library(sf)
library(leaflet)
library(stringr)
library(lubridate)
library(readr)
library(tidyr)
library(viridis)
library(plotly)
library(gghighlight)
library(vroom)
```

# Data Summaries & Preprocessing

## Data

### new read method vroom

```{r}
all_data_csv <- vroom(
  file   = "./NEW_fixed_reef_full.csv",
  delim  = ",",
  col_types = cols(
    date = col_date(format = "")
  )
)

# add year and month columns
all_data <- all_data_csv %>%
  mutate(
    date  = as.Date(date),
    year  = year(date),
    month = month(date, label = TRUE, abbr = TRUE)
  )
```
```{r}
tail(all_data)
```


## old methoed read.csv

```{r dat, message=FALSE, warning=FALSE}
#----REEF DATA----

all_data_csv <- read.csv("D:/R_studio_working_dir/DATA3888_group/reef/NEW_fixed_reef_full.csv")

# add year and month columns
all_data <- all_data_csv |>
  mutate(date = as.Date(date)) |>
  mutate(year = year(date), month = month(as.Date(date), label = TRUE, abbr = TRUE))
```

## Summarise Temperature Variables

Original data was daily temperature data including daily DHW, SST and SSTA for every point in the GBR. All temperature averages are calculated on this data.

1. Yearly average for every point on GBR

2. Monthly Average across the entire GBR

```{r temp-summary, message=FALSE}
# ALL TEMPERATURE VARIABLES yearly avg for every point on GBR
yearly_temp_avg <- all_data |>
  group_by(year, lon, lat) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE),
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  )

# ALL TEMPERATURE VARIABLES monthly avg across entire GBR
monthly_temp <- all_data |>
  group_by(year, month) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE), 
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop")
```

## GBR Boundaries

1. Bioregions (reefal and non-reefal marine area)

Although this was not a geospatial variable considered in our experimental research and investigation, it is a helpful overlay to have on the map for the stakeholder.

2. Continental Shelf (Inner, Mid, Outer)

```{r bound, message=FALSE}
#----BOUNDARIES----
# 1. bioregions overlay data
bioregions_sf <- st_read("./Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074-20250518T100754Z-1-001/Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074/Great_Barrier_Reef_Marine_Park_Marine_Bioregions.shp")
# add reefal status
bioregions_sf <- bioregions_sf |> 
  mutate(
    reef_status = factor(REEF_ID, levels = c(0, 1), labels = c("Non-Reefal", "Reefal"))
  )

# not using anymore
# # 2. management zones
# manage_sf <- st_read("D:/R_studio_working_dir/DATA3888_group/reef/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161-20250518T101033Z-1-001/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161/Great_Barrier_Reef_Marine_Park_Management_Areas.shp")

# 3. shelf zones (will complete this before monday week 12, for now use management zones in the models)
shelf_sf <- st_read("./shelf_boundaries-20250523T055421Z-1-001/shelf_boundaries/shelf_zones_dissolved.shp") |>
  st_transform(4326)

```
# Shiny App

## User Interface

```{r ui, echo=FALSE}
ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      id = "tabs",
      menuItem("Introduction", tabName = "introduction", icon = icon("info-circle")),
      menuItem("Map",          tabName = "map",          icon = icon("globe")),
      menuItem("ENSO and Temp",tabName = "enso_temp",     icon = icon("chart-line")),
      menuItem("Relation",     tabName = "relation",      icon = icon("chart-bar"))
    )
  ),
  dashboardBody(
    tabItems(
      # ─── Introduction ─────────────────────────────────────────────────
      tabItem(tabName = "introduction",
        h2("Introduction", align = "center"),
        includeMarkdown("intro_test.md")
      ),

      # ─── Map ─────────────────────────────────────────────────────────
      tabItem(tabName = "map",
        fluidRow(
          column(width = 4,

            # Year slider
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year", "Select Year:",
                min   = min(yearly_temp_avg$year),
                max   = max(yearly_temp_avg$year),
                value = min(yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),

            # Model select
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable", "Model select:",
                choices = c(
                  "Mean DHW"  = "mean_dhw",
                  "Mean SST"  = "mean_sst",
                  "Mean SSTA" = "mean_ssta"
                ), selected = "mean_dhw"
              )
            ),

            # Bio regions
            box(width = NULL, status = "primary", solidHeader = TRUE,
                checkboxGroupInput("zones", "Bio-regions:",
                choices  = c("Reefal", "Non-Reefal"),
                selected = c("Reefal", "Non-Reefal")
              )
            ),
          # Shelf
          box(width = NULL, status = "primary", solidHeader = TRUE,
              checkboxGroupInput("shelf_zones", "Continental Shelf:",
              choices  = c("Inner", "Mid", "Outer"),
              selected = c("Inner", "Mid", "Outer")
              )
            ),

            # Compare controls: slider + confirm
            box(width = NULL, status = "info", solidHeader = TRUE,
              div(style = "display:flex; align-items:center;",
                sliderInput("compare_year", NULL,
                  min   = min(yearly_temp_avg$year),
                  max   = max(yearly_temp_avg$year),
                  value = min(yearly_temp_avg$year),
                  step  = 1, sep = "",
                  width = "70%"
                ),
                actionButton("confirm_compare", "Compare",
                  style = "margin-left:10px;"
                )
              )
            )
          ),

          column(width = 8,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "700px")
            ),
            # placeholder for the comparison map
            uiOutput("compare_map")
          )
        )
      ),

      # ─── ENSO + Temp ──────────────────────────────────────────────────
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
            plotlyOutput("soi_plot", height = "300px")
          )
        ),
        fluidRow(
          column(width = 3,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("dhw_year", "Select Year for DHW Plot:",
                min   = min(monthly_dhw$year),
                max   = max(monthly_dhw$year),
                value = min(monthly_dhw$year),
                step  = 1, sep = ""
              )
            )
          ),
          column(width = 9,
            box(title = "Monthly Mean DHW for Selected Year", width = NULL,
              status = "primary", solidHeader = TRUE,
              plotlyOutput("dhw_monthly_plot", height = "300px")
            )
          )
        )
      ),

      # ─── Relation ────────────────────────────────────────────────────
      tabItem(tabName = "relation",
        h2("Relation Plot", align = "center"),
        p("Put your relation-analysis content or placeholder here.")
      )
    )
  )
)
```

```{r server, echo=FALSE}
server <- function(input, output, session) {

  # Reproject boundaries on the fly
  bio4326 <- st_transform(bioregions_sf, 4326)
  shelf4326 <- st_transform(shelf_sf, 4326)
  # Hold compare year
  comp_year <- reactiveVal(NULL)
  observeEvent(input$year,        comp_year(NULL),        ignoreInit = TRUE)
  observeEvent(input$confirm_compare, {
    # store the compare year
    comp_year(input$compare_year)
  
    # immediately pop up a modal to tell them the map is below
    showModal(modalDialog(
      h4("Compared map is displayed below"),
      footer = modalButton("Confirm"),
      easyClose = FALSE
    ))
  })

  # Main map
  output$map <- renderLeaflet({
  req(input$year, input$variable, input$zones, input$shelf_zones)
  df <- yearly_temp_avg %>%
    filter(year == input$year) %>%
    mutate(
      val = .data[[input$variable]],
      popup = paste0(
        switch(input$variable,
          mean_dhw = "DHW: ",
          mean_sst = "SST: ",
          mean_ssta = "SSTA: "
        ), round(val, 2)
      )
    )
  pal <- colorNumeric(viridis(100), domain = df$val)

  m <- leaflet(df) %>%
    addProviderTiles("CartoDB.Positron") %>%
    setView(147.6, -18.3, zoom = 5) %>%
    addCircleMarkers(
      radius = 3, stroke = FALSE, fillOpacity = 0.7,
      color = ~pal(val), popup = ~popup
    ) %>%
    addLegend(
      position = "topright", pal = pal, values = df$val,
      title = switch(input$variable,
        mean_dhw = "Mean DHW",
        mean_sst = "Mean SST",
        mean_ssta = "Mean SSTA"
      ), opacity = 0.8
    )

  if ("Reefal" %in% input$zones) {
    m <- m %>% addPolygons(
      data = filter(bio4326, reef_status == "Reefal"),
      fillColor = "lightblue", color = "lightblue",
      weight = 1, opacity = 0.5, fillOpacity = 0.2
    )
  }
  if ("Non-Reefal" %in% input$zones) {
    m <- m %>% addPolygons(
      data = filter(bio4326, reef_status == "Non-Reefal"),
      fillColor = "lightgreen", color = "lightgreen",
      weight = 1, opacity = 0.5, fillOpacity = 0.2
    )
  }

  # Add shelf overlays
  if ("Inner Shelf" %in% input$shelf_zones) {
    m <- m %>% addPolygons(
      data = filter(shelf4326, shelf_zone == "Inner Shelf"),
      fillColor = "skyblue", color = "skyblue",
      weight = 1, opacity = 0.5, fillOpacity = 0.2
    )
  }
  if ("Mid Shelf" %in% input$shelf_zones) {
    m <- m %>% addPolygons(
      data = filter(shelf4326, shelf_zone == "Mid Shelf"),
      fillColor = "dodgerblue", color = "dodgerblue",
      weight = 1, opacity = 0.5, fillOpacity = 0.2
    )
  }
  if ("Outer Shelf" %in% input$shelf_zones) {
    m <- m %>% addPolygons(
      data = filter(shelf4326, shelf_zone == "Outer Shelf"),
      fillColor = "navy", color = "navy",
      weight = 1, opacity = 0.5, fillOpacity = 0.2
    )
  }
  m
  })


  # Comparison map UI
  output$compare_map <- renderUI({
    req(comp_year())
    box(title = paste("Comparison Map — Year:", comp_year()),
        width = NULL, status = "primary", solidHeader = TRUE,
        leafletOutput("map2", height = "700px"))
  })

  # Comparison map
  output$map2 <- renderLeaflet({
    req(comp_year(), input$variable, input$zones)
    df2 <- yearly_temp_avg %>%
      filter(year == comp_year()) %>%
      mutate(
        val   = .data[[ input$variable ]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "DHW: ",
            mean_sst  = "SST: ",
            mean_ssta = "SSTA: "
          ), round(val,2)
        )
      )
    pal2 <- colorNumeric(viridis(100), domain = df2$val)

    m2 <- leaflet(df2) %>%
      addProviderTiles("CartoDB.Positron") %>%
      setView(147.6, -18.3, zoom = 5) %>%
      addCircleMarkers(
        radius = 3, stroke = FALSE, fillOpacity = 0.7,
        color = ~pal2(val), popup = ~popup
      ) %>%
      addLegend(
        position = "topright", pal = pal2, values = df2$val,
        title   = switch(input$variable,
                    mean_dhw  = "Mean DHW",
                    mean_sst  = "Mean SST",
                    mean_ssta = "Mean SSTA"
                  ), opacity = 0.8
      )
    if ("Reefal" %in% input$zones) {
      m2 <- m2 %>% addPolygons(
        data=filter(bio4326, reef_status=="Reefal"),
        fillColor="lightblue", color="lightblue",
        weight=1, opacity=0.5, fillOpacity=0.2
      )
    }
    if ("Non-Reefal" %in% input$zones) {
      m2 <- m2 %>% addPolygons(
        data=filter(bio4326, reef_status=="Non-Reefal"),
        fillColor="lightgreen", color="lightgreen",
        weight=1, opacity=0.5, fillOpacity=0.2
      )
    }
    m2
  })

  # SOI anomaly
  output$soi_plot <- renderPlotly({
    req(input$dhw_year)
  
    # compute the start/end of the selected year
    start_date <- as.Date(paste0(input$dhw_year, "-01-01"))
    end_date   <- as.Date(paste0(input$dhw_year, "-12-31"))
  
    p1 <- ggplot(soi, aes(x = date, y = soi_anomaly)) +
      geom_line(color = "#2c7fb8") +
      gghighlight(
        date >= start_date & date <= end_date,
        unhighlighted_params = list(color = "gray80")
      ) +
      theme_minimal() +
      labs(
        x     = "Date",
        y     = "SOI Anomaly",
        title = paste("SOI Anomaly —", input$dhw_year, "highlighted")
      )
  
    ggplotly(p1)
  })

  # Monthly DHW
  output$dhw_monthly_plot <- renderPlotly({
    p2 <- monthly_dhw %>%
      filter(year == input$dhw_year) %>%
      ggplot(aes(month, mean_dhw, group=1)) +
        geom_line(color="#d95f02") + geom_point() +
        labs(title=paste("Monthly Mean DHW in", input$dhw_year)) +
        theme_minimal()
    ggplotly(p2)
  })
}
```

```{r}
shinyApp(ui, server)
```

