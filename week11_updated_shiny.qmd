---
title: "imane"
format: html
editor: source
---

# shiny app - MAP
```{r setup, echo=FALSE}
library(shiny)
library(shinydashboard)
library(dplyr)
library(sf)
library(leaflet)
library(stringr)
library(lubridate)
library(readr)
library(tidyr)
library(viridis)
library(plotly)
```

# temperature variables (DHW)
```{r warning=FALSE}
#----REEF TEMP----
# this will be the directory to the "NOAA_data" folder in the google drive
data_dir <- "D:/R_studio_working_dir/DATA3888_group/reef/NOAA_data-20250518T095925Z-1-001/NOAA_data"
csv_files <- list.files(data_dir, pattern = "\\.csv$", full.names = TRUE)

# read and format each csv
load_and_process_csv <- function(file) {
  df <- read_csv(file)
  df <- df|>
    mutate(
      year = year(as.Date(date)),
      # extract lon and lat from "c(lon, lat)"
      lon = as.numeric(str_extract(geometry, "(?<=c\\()[^,]+")),
      lat = as.numeric(str_extract(geometry, "(?<=,\\s)-?\\d+\\.\\d+(?=\\))"))
    )
  return(df)
}

# combine all csv files to 1 dataframe
all_data <- bind_rows(lapply(csv_files, load_and_process_csv))

# drop original coordinate column, since we have lon and lat
all_date_clean <- all_data |>
  select(-geometry)


# ONLY DHW yearly averages per point (for the map in tab1 of shiny)
yearly_avg <- all_data |>
  group_by(year, lon, lat) |>
  summarise(mean_dhw = mean(mean_dhw, na.rm = TRUE), .groups = "drop") |>
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

# ONLY DHW monthly average df for entire GBR (for the plot in tab2 of shiny)
monthly_dhw <- all_data |>
  mutate(month = month(as.Date(date), label = TRUE, abbr = TRUE),
         year = year(as.Date(date))) |>
  group_by(year, month) |>
  summarise(mean_dhw = mean(mean_dhw, na.rm = TRUE), .groups = "drop")

# colour blind friendly palette
pal = colorNumeric(palette = viridis(100), domain = yearly_avg$mean_dhw)
```


right now, the shiny app only presents the mean_dhw data (yearly_avg, monthly_dhw) 

but please use these dataframes since they include all 3 variables (yearly_temp_avg, monthly_temp)
```{r}

# please use this for the map because this contains all 3 temperature variables

# ALL TEMPERATURE VARIABLES yearly avg per point on GBR
yearly_temp_avg <- all_data |>
  group_by(year, lon, lat) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE),
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  ) |>
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

# ALL TEMPERATURE VARIABLES monthly avg for entire GBR
monthly_temp <- all_data |>
  mutate(month = month(as.Date(date), label = TRUE, abbr = TRUE),
         year = year(as.Date(date))) |>
  group_by(year, month) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE), 
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop")
```

# Boundaries

bioregions (reefal and non-reefal) and management areas
```{r}
#----BOUNDARIES----
# 1. bioregions overlay data
bioregions_sf <- st_read("D:/R_studio_working_dir/DATA3888_group/reef/Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074-20250518T100754Z-1-001/Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074/Great_Barrier_Reef_Marine_Park_Marine_Bioregions.shp")
# add reefal status
bioregions_sf <- bioregions_sf |> 
  mutate(
    reef_status = factor(REEF_ID, levels = c(0, 1), labels = c("Non-Reefal", "Reefal"))
  )

# 2. management zones
manage_sf <- st_read("D:/R_studio_working_dir/DATA3888_group/reef/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161-20250518T101033Z-1-001/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161/Great_Barrier_Reef_Marine_Park_Management_Areas.shp")

# 3. shelf zones (will complete this before monday week 12, for now use management zones in the models)
```

# soi index
```{r}
# read in CLEAN soi data (this is in Reef03_EDA on google drive)
soi <- read.csv("D:/R_studio_working_dir/DATA3888_group/reef/soi_index.csv")
str(soi)

# change date column
soi <- soi |> mutate(date = as.Date(date))
```


# shiny app (old)
```{r}
#----SHINY APP----

# please make changes here

# ui
ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Map", tabName = "map", icon = icon("globe")),
      menuItem("ENSO and Temp", tabName = "enso_temp", icon = icon("chart-line"))),
    sliderInput("year", "Select Year:", min = min(yearly_avg$year), max = max(yearly_avg$year),
                value = min(yearly_avg$year), step = 1, sep = "")),
  dashboardBody(
    tabItems(
      tabItem(tabName = "map",
        leafletOutput("map", height = "700px")
      ),
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
              plotOutput("soi_plot", height = "300px"))
        ),
      fluidRow(
        box(title = "Monthly Mean DHW for Selected Year", width = 12,
            plotOutput("dhw_monthly_plot", height = "300px"))
        )
  )
)
  )
)

# server
server <- function(input, output, session) {
  filtered_data <- reactive({
    yearly_avg |> 
      filter(year == input$year)
  })
  # map (ONLY DHW RIGHT NOW, needs to have all the temperature variables)
  output$map <- renderLeaflet({
    leaflet() |>
      addProviderTiles("CartoDB.Positron") |>
      setView(lng = 147.6, lat = -18.3, zoom = 5)
  })
  # plot 1: soi over time
  output$soi_plot <- renderPlot({
    ggplot(soi, aes(x = date, y = soi_anomaly)) +
      geom_line(color = "#2c7fb8") +
      labs(x = "Date", y = "SOI Anomaly", title = "Southern Oscillation Index (SOI) Anomaly Over Time") +
      theme_minimal()
    # ggplotly(p1)
  })

  # plot 2: monthly mean DHW for each year
  # also needs to have all the temperature variables
  output$dhw_monthly_plot <- renderPlot({
    filtered_monthly = monthly_dhw |> filter(year == input$year)
    
    ggplot(filtered_monthly, aes(x = month, y = mean_dhw, group = 1)) +
      geom_line(color = "#d95f02") +
      geom_point() +
      labs(x = "Month", y = "Mean DHW", title = paste("Monthly Mean DHW in", input$year)) +
      theme_minimal()
    # ggplotly(p2)
  })
  
  observe({
    leafletProxy("map", data = filtered_data()) |>
      clearMarkers() |>
      clearControls() |>
      addCircleMarkers(
        radius = 3,
        stroke = FALSE,
        fillOpacity = 0.7,
        color = ~pal(mean_dhw),
        popup = ~paste0("DHW: ", round(mean_dhw, 2))
      ) |>
      addLegend(
        "topright", pal = pal, values = ~mean_dhw,
        title = "Mean DHW", opacity = 0.8
      ) |>
      # reefal
      addPolygons(
        data = filter(bioregions_sf, reef_status == "Reefal"),
        fillColor = "lightblue", color = "lightblue",
        weight = 1, opacity = 0.5, fillOpacity = 0.2,
        group = "Reefal",
        label = ~DESCRIP
      ) |>
      # non-reefal
      addPolygons(
        data = filter(bioregions_sf, reef_status == "Non-Reefal"),
        fillColor = "lightgreen", color = "lightgreen",
        weight = 1, opacity = 0.5, fillOpacity = 0.2,
        group = "Non-Reefal",
        label = ~DESCRIP
      ) |>
      addLayersControl(
        overlayGroups = c("Reefal", "Non-Reefal", "Management Zones"),
        options = layersControlOptions(collapsed = FALSE)
      ) |>
      # management zones
      addPolygons(
        data = manage_sf,
        fillColor = "orange",
        color = "orange",
        weight = 1,
        opacity = 0.6,
        fillOpacity = 0.15,
        group = "Management Zones",
        label = ~AREA_DESCR
      )
  })
}

shinyApp(ui, server)
```

# new ver(v0.1)
```{r}
# UI
ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Map",        tabName = "map",      icon = icon("globe")),
      menuItem("ENSO and Temp", tabName = "enso_temp", icon = icon("chart-line"))
    )
    # ---- slider removed from here ----
  ),
  dashboardBody(
    tabItems(
      
      # --- Map tab with slider and map side by side ---      
      tabItem(tabName = "map",
        fluidRow(
          column(
            width = 4,
            # year selector moved here
            box(
              width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput(
                inputId = "year",
                label   = "Select Year:",
                min     = min(yearly_avg$year),
                max     = max(yearly_avg$year),
                value   = min(yearly_avg$year),
                step    = 1,
                sep     = ""
              )
            )
          ),
          column(
            width = 8,
            # map output
            box(
              width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "700px")
            )
          )
        )
      ),
      
      # --- ENSO and Temp tab remains unchanged ---
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
              plotOutput("soi_plot", height = "300px"))
        ),
        fluidRow(
          box(title = "Monthly Mean DHW for Selected Year", width = 12,
              plotOutput("dhw_monthly_plot", height = "300px"))
        )
      )
      
    )  # end tabItems
  )  # end dashboardBody
)  # end dashboardPage

```

```{r}
server <- function(input, output, session) {
  filtered_data <- reactive({
    yearly_avg |> 
      filter(year == input$year)
  })
  # map (ONLY DHW RIGHT NOW, needs to have all the temperature variables)
  output$map <- renderLeaflet({
    leaflet() |>
      addProviderTiles("CartoDB.Positron") |>
      setView(lng = 147.6, lat = -18.3, zoom = 5)
  })
  # plot 1: soi over time
  output$soi_plot <- renderPlot({
    ggplot(soi, aes(x = date, y = soi_anomaly)) +
      geom_line(color = "#2c7fb8") +
      labs(x = "Date", y = "SOI Anomaly", title = "Southern Oscillation Index (SOI) Anomaly Over Time") +
      theme_minimal()
    # ggplotly(p1)
  })

  # plot 2: monthly mean DHW for each year
  # also needs to have all the temperature variables
  output$dhw_monthly_plot <- renderPlot({
    filtered_monthly = monthly_dhw |> filter(year == input$year)
    
    ggplot(filtered_monthly, aes(x = month, y = mean_dhw, group = 1)) +
      geom_line(color = "#d95f02") +
      geom_point() +
      labs(x = "Month", y = "Mean DHW", title = paste("Monthly Mean DHW in", input$year)) +
      theme_minimal()
    # ggplotly(p2)
  })
  
  observe({
    leafletProxy("map", data = filtered_data()) |>
      clearMarkers() |>
      clearControls() |>
      addCircleMarkers(
        radius = 3,
        stroke = FALSE,
        fillOpacity = 0.7,
        color = ~pal(mean_dhw),
        popup = ~paste0("DHW: ", round(mean_dhw, 2))
      ) |>
      addLegend(
        "topright", pal = pal, values = ~mean_dhw,
        title = "Mean DHW", opacity = 0.8
      ) |>
      # reefal
      addPolygons(
        data = filter(bioregions_sf, reef_status == "Reefal"),
        fillColor = "lightblue", color = "lightblue",
        weight = 1, opacity = 0.5, fillOpacity = 0.2,
        group = "Reefal",
        label = ~DESCRIP
      ) |>
      # non-reefal
      addPolygons(
        data = filter(bioregions_sf, reef_status == "Non-Reefal"),
        fillColor = "lightgreen", color = "lightgreen",
        weight = 1, opacity = 0.5, fillOpacity = 0.2,
        group = "Non-Reefal",
        label = ~DESCRIP
      ) |>
      addLayersControl(
        overlayGroups = c("Reefal", "Non-Reefal", "Management Zones"),
        options = layersControlOptions(collapsed = FALSE)
      ) |>
      # management zones
      addPolygons(
        data = manage_sf,
        fillColor = "orange",
        color = "orange",
        weight = 1,
        opacity = 0.6,
        fillOpacity = 0.15,
        group = "Management Zones",
        label = ~AREA_DESCR
      )
  })
}
```


```{r}
shinyApp(ui, server)
```
# new ver(v0.3) all requirement meeted

```{r}
yearly_temp_avg <- all_data %>%
  # extract year first, if you haven't already
  mutate(year = as.integer(format(as.Date(date), "%Y"))) %>%
  # group by year and each lon/lat point
  group_by(year, lon, lat) %>%
  # compute mean for all three metrics
  summarise(
    mean_dhw  = mean(mean_dhw,  na.rm = TRUE),
    mean_sst  = mean(mean_sst,  na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  ) 
#%>%
  # turn into an sf object with WGS84 long/lat
  #st_as_sf(coords = c("lon", "lat"), crs = 4326)
```

```{r}
ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Map",         tabName = "map",      icon = icon("globe")),
      menuItem("ENSO and Temp", tabName = "enso_temp", icon = icon("chart-line"))
    )
  ),
  dashboardBody(
    tabItems(
      # ─── Map tab ──────────────────────────────────────────────────────
      tabItem(tabName = "map",
        fluidRow(
          # ←── Controls column
          column(width = 4,
            # 1) Year slider
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year", "Select Year:",
                min   = min(yearly_temp_avg$year),
                max   = max(yearly_temp_avg$year),
                value = min(yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),
            # 2) Model select
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable", "Model select:",
                choices = c(
                  "Mean DHW"  = "mean_dhw",
                  "Mean SST"  = "mean_sst",
                  "Mean SSTA" = "mean_ssta"
                ),
                selected = "mean_dhw"
              )
            ),
            # 3) Zone checkboxes
            box(width = NULL, status = "primary", solidHeader = TRUE,
              checkboxGroupInput("zones", "Zone:",
                choices = c("Reefal", "Non-Reefal", "Management Zones"),
                selected = c("Reefal", "Non-Reefal", "Management Zones")
              )
            )
          ),

          # ─── Map column
          column(width = 8,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "700px")
            )
          )
        )
      ),

      # ─── ENSO & Temp tab (unchanged) ─────────────────────────────────
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
              plotOutput("soi_plot", height = "300px"))
        ),
        fluidRow(
          box(title = "Monthly Mean DHW for Selected Year", width = 12,
              plotOutput("dhw_monthly_plot", height = "300px"))
        )
      )
    )
  )
)
```

```{r}
server <- function(input, output, session) {

  # (1) Filter yearly data by year
  filtered_data <- reactive({
    req(input$year)
    yearly_temp_avg %>%
      filter(year == input$year)
  })

  # (2) Palette for chosen variable
  pal <- reactive({
    colorNumeric(viridis::viridis(100),
                 domain = filtered_data()[[ input$variable ]])
  })

  # (3) Base map
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles("CartoDB.Positron") %>%
      setView(147.6, -18.3, zoom = 5)
  })

  # (4) Update on year / model / zones changes
  observe({
    df   <- filtered_data()
    var  <- input$variable
    vals <- df[[var]]
    p    <- pal()
    pop  <- paste0(
      switch(var,
        mean_dhw  = "DHW: ",
        mean_sst  = "SST: ",
        mean_ssta = "SSTA: "
      ),
      round(vals, 2)
    )

    proxy <- leafletProxy("map", data = df) %>%
      clearMarkers() %>%
      clearShapes() %>%
      clearControls() %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        fillColor   = p(vals),
        popup       = pop
      ) %>%
      addLegend(
        position = "topright",
        pal      = p,
        values   = vals,
        title    = switch(var,
                     mean_dhw  = "Mean DHW",
                     mean_sst  = "Mean SST",
                     mean_ssta = "Mean SSTA"
                   ),
        opacity  = 0.8
      )

    # Conditionally add each polygon layer
    if ("Reefal" %in% input$zones) {
      proxy <- proxy %>%
        addPolygons(
          data      = filter(bioregions_sf, reef_status == "Reefal"),
          fillColor = "lightblue", color = "lightblue",
          weight    = 1, opacity = 0.5, fillOpacity = 0.2,
          group     = "Reefal", label = ~DESCRIP
        )
    }
    if ("Non-Reefal" %in% input$zones) {
      proxy <- proxy %>%
        addPolygons(
          data      = filter(bioregions_sf, reef_status == "Non-Reefal"),
          fillColor = "lightgreen", color = "lightgreen",
          weight    = 1, opacity = 0.5, fillOpacity = 0.2,
          group     = "Non-Reefal", label = ~DESCRIP
        )
    }
    if ("Management Zones" %in% input$zones) {
      proxy <- proxy %>%
        addPolygons(
          data      = manage_sf,
          fillColor = "orange", color = "orange",
          weight    = 1, opacity = 0.6, fillOpacity = 0.15,
          group     = "Management Zones", label = ~AREA_DESCR
        )
    }

    # paint it all
    proxy
  })


  # (5) SOI plot
  output$soi_plot <- renderPlot({
    ggplot(soi, aes(date, soi_anomaly)) +
      geom_line(color = "#2c7fb8") +
      labs(
        x     = "Date",
        y     = "SOI Anomaly",
        title = "Southern Oscillation Index (SOI) Anomaly Over Time"
      ) +
      theme_minimal()
  })

  # (6) Monthly DHW plot
  output$dhw_monthly_plot <- renderPlot({
    monthly_dhw %>%
      filter(year == input$year) %>%
      ggplot(aes(month, mean_dhw, group = 1)) +
        geom_line(color = "#d95f02") +
        geom_point() +
        labs(
          x     = "Month",
          y     = "Mean DHW",
          title = paste("Monthly Mean DHW in", input$year)
        ) +
        theme_minimal()
  })

}
```

```{r}
shinyApp(ui, server)
```

# new ver(v0.5) final one

```{r}
yearly_temp_avg <- all_data %>%
  # extract year first, if you haven't already
  mutate(year = as.integer(format(as.Date(date), "%Y"))) %>%
  # group by year and each lon/lat point
  group_by(year, lon, lat) %>%
  # compute mean for all three metrics
  summarise(
    mean_dhw  = mean(mean_dhw,  na.rm = TRUE),
    mean_sst  = mean(mean_sst,  na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  ) 
```

```{r ui, echo=FALSE}
ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      id = "tabs",
      menuItem("Introduction", tabName = "introduction", icon = icon("info-circle")),
      menuItem("Map",          tabName = "map",          icon = icon("globe")),
      menuItem("ENSO and Temp",tabName = "enso_temp",    icon = icon("chart-line")),
      menuItem("Relation",     tabName = "relation",     icon = icon("chart-bar"))
    )
  ),
  dashboardBody(
    tabItems(
      # ─── Introduction ───────────────────────────────────────────────
      tabItem(tabName = "introduction",
        h2("Introduction", align = "center"),
        includeMarkdown("D:/R_studio_working_dir/DATA3888_group/intro_test.md")
      ),
      # ─── Map ─────────────────────────────────────────────────────────
      tabItem(tabName = "map",
        fluidRow(
          column(width = 4,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year", "Select Year:",
                min   = min(yearly_temp_avg$year),
                max   = max(yearly_temp_avg$year),
                value = min(yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable", "Model select:",
                choices = c(
                  "Mean DHW"  = "mean_dhw",
                  "Mean SST"  = "mean_sst",
                  "Mean SSTA" = "mean_ssta"
                ),
                selected = "mean_dhw"
              )
            ),
            box(width = NULL, status = "primary", solidHeader = TRUE,
              checkboxGroupInput("zones", "Zone:",
                choices  = c("Reefal","Non-Reefal","Management Zones"),
                selected = c("Reefal","Non-Reefal","Management Zones")
              )
            )
          ),
          column(width = 8,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "700px")
            )
          )
        )
      ),
      # ─── ENSO & Temp ──────────────────────────────────────────────────
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
              plotOutput("soi_plot", height = "300px"))
        ),
        fluidRow(
          box(title = "Monthly Mean DHW for Selected Year", width = 12,
              plotOutput("dhw_monthly_plot", height = "300px"))
        )
      ),
      # ─── Relation ─────────────────────────────────────────────────────
      tabItem(tabName = "relation",
        h2("Relation Plot", align = "center"),
        p("Put your relation-analysis content or placeholder here.")
      )
    )
  )
)
```

```{r}
server <- function(input, output, session) {
  
  # Reproject the boundary layers on the fly to WGS84
  bio4326 <- st_transform(bioregions_sf, 4326)
  man4326 <- st_transform(manage_sf,       4326)
  
  # Render the full map (points + legend + polygons) whenever inputs change
  output$map <- renderLeaflet({
    req(input$year, input$variable, input$zones)
    
    # 1) subset & prepare popup/value
    df <- yearly_temp_avg %>%
      filter(year == input$year) %>%
      mutate(
        val   = .data[[ input$variable ]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "DHW: ",
            mean_sst  = "SST: ",
            mean_ssta = "SSTA: "
          ),
          round(val, 2)
        )
      )
    
    # 2) palette
    pal <- colorNumeric(viridis(100), domain = df$val)
    
    # 3) base map + points + legend
    m <- leaflet(df) %>%
      addProviderTiles("CartoDB.Positron") %>%
      setView(lng = 147.6, lat = -18.3, zoom = 5) %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        color       = ~pal(val),
        popup       = ~popup
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal,
        values   = df$val,
        title    = switch(input$variable,
                     mean_dhw  = "Mean DHW",
                     mean_sst  = "Mean SST",
                     mean_ssta = "Mean SSTA"
                   ),
        opacity  = 0.8
      )
    
    # 4) add polygons (using the reprojected layers)
    if ("Reefal" %in% input$zones) {
      m <- m %>% addPolygons(
        data      = filter(bio4326, reef_status == "Reefal"),
        fillColor = "lightblue", color = "lightblue",
        weight    = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Non-Reefal" %in% input$zones) {
      m <- m %>% addPolygons(
        data      = filter(bio4326, reef_status == "Non-Reefal"),
        fillColor = "lightgreen", color = "lightgreen",
        weight    = 1, opacity = 0.5, fillOpacity = 0.2
      )
    }
    if ("Management Zones" %in% input$zones) {
      m <- m %>% addPolygons(
        data      = man4326,
        fillColor = "orange", color = "orange",
        weight    = 1, opacity = 0.6, fillOpacity = 0.15
      )
    }
    
    m
  })
  
  # SOI anomaly plot (unchanged)
  output$soi_plot <- renderPlot({
    ggplot(soi, aes(x = date, y = soi_anomaly)) +
      geom_line(color = "#2c7fb8") +
      labs(x = "Date", y = "SOI Anomaly") +
      theme_minimal()
  })
  
  # Monthly DHW plot (unchanged)
  output$dhw_monthly_plot <- renderPlot({
    monthly_dhw %>%
      filter(year == input$year) %>%
      ggplot(aes(x = month, y = mean_dhw, group = 1)) +
        geom_line(color = "#d95f02") +
        geom_point() +
        labs(
          x     = "Month",
          y     = "Mean DHW",
          title = paste("Monthly Mean DHW in", input$year)
        ) +
      theme_minimal()
  })
}
```


```{r}
shinyApp(ui, server)
```


# new ver (v0.4) do no use. compare button not work

```{r ui, echo=FALSE}
ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Map",         tabName = "map",      icon = icon("globe")),
      menuItem("ENSO and Temp", tabName = "enso_temp", icon = icon("chart-line"))
    )
  ),
  dashboardBody(
    tabItems(
      
      # ─── Map Tab ───────────────────────────────────────────────────────────
      tabItem(tabName = "map",
        fluidRow(
          
          # ── Controls Col ───────────────────────────────
          column(width = 4,
            
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year", "Select Year:",
                min   = min(yearly_temp_avg$year),
                max   = max(yearly_temp_avg$year),
                value = min(yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),
            
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable", "Model select:",
                c("Mean DHW"  = "mean_dhw",
                  "Mean SST"  = "mean_sst",
                  "Mean SSTA" = "mean_ssta"
                ),
                selected = "mean_dhw"
              )
            ),
            
            box(width = NULL, status = "primary", solidHeader = TRUE,
              checkboxGroupInput("zones", "Zone:",
                c("Reefal", "Non-Reefal", "Management Zones"),
                selected = c("Reefal","Non-Reefal","Management Zones")
              )
            ),
            
            # Compare controls in their own box
            box(width = NULL, status = "info", solidHeader = TRUE, title = "Compare Map",
              fluidRow(
                column(8,
                  sliderInput("compare_year", NULL,
                    min   = min(yearly_temp_avg$year),
                    max   = max(yearly_temp_avg$year),
                    value = min(yearly_temp_avg$year),
                    step  = 1, sep = "", width = "100%"
                  )
                ),
                column(4, br(),
                  actionButton("confirm", "Confirm", class="btn-success")
                )
              )
            )
            
          ),
          
          # ── Maps Col ────────────────────────────────────
          column(width = 8,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "600px")
            ),
            # placeholder for the comparison map box
            uiOutput("compare_ui")
          )
          
        )
      ),
      
      
      # ─── ENSO & Temp Tab ───────────────────────────────────────────────────
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
              plotOutput("soi_plot", height = "300px"))
        ),
        fluidRow(
          box(title = "Monthly Mean DHW for Selected Year", width = 12,
              plotOutput("dhw_monthly_plot", height = "300px"))
        )
      )
      
    )
  )
)

```

```{r}
server <- function(input, output, session) {
  
  # 1) Hold the “compare” year
  comp_year <- reactiveVal(NULL)
  
  # Reset comparison whenever main year changes
  observeEvent(input$year, {
    comp_year(NULL)
  }, ignoreInit = TRUE)
  
  # When Confirm is clicked, store compare_year()
  observeEvent(input$confirm, {
    comp_year(input$compare_year)
  })
  
  
  # 2) Subset data and build main palette
  filtered_data <- reactive({
    req(input$year)
    yearly_temp_avg %>% 
      filter(year == input$year)
  })
  pal_main <- reactive({
    colorNumeric(
      palette = viridis::viridis(100),
      domain  = filtered_data()[[ input$variable ]]
    )
  })
  
  
  # 3) Render base main map
  output$map <- renderLeaflet({
    leaflet() %>%
      addProviderTiles("CartoDB.Positron") %>%
      setView(lng = 147.6, lat = -18.3, zoom = 5)
  })
  
  
  # 4) Update main map on year/variable/zones change
  observe({
    df   <- filtered_data()
    var  <- input$variable
    vals <- df[[ var ]]
    pal  <- pal_main()
    pop  <- paste0(
      switch(var,
        mean_dhw  = "DHW: ",
        mean_sst  = "SST: ",
        mean_ssta = "SSTA: "
      ),
      round(vals, 2)
    )
    
    proxy1 <- leafletProxy("map", data = df) %>%
      clearMarkers() %>%
      clearShapes() %>%
      clearControls() %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        fillColor   = pal(vals),
        popup       = pop
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal,
        values   = vals,
        title    = switch(var,
                     mean_dhw  = "Mean DHW",
                     mean_sst  = "Mean SST",
                     mean_ssta = "Mean SSTA"
                   ),
        opacity  = 0.8
      )
    
    # Reefal
    if ("Reefal" %in% input$zones) {
      proxy1 <- proxy1 %>%
        addPolygons(
          data      = filter(bioregions_sf, reef_status == "Reefal"),
          fillColor = "lightblue", color = "lightblue",
          weight    = 1, opacity = 0.5, fillOpacity = 0.2,
          group     = "Reefal", label = ~DESCRIP
        )
    }
    # Non-Reefal
    if ("Non-Reefal" %in% input$zones) {
      proxy1 <- proxy1 %>%
        addPolygons(
          data      = filter(bioregions_sf, reef_status == "Non-Reefal"),
          fillColor = "lightgreen", color = "lightgreen",
          weight    = 1, opacity = 0.5, fillOpacity = 0.2,
          group     = "Non-Reefal", label = ~DESCRIP
        )
    }
    # Management Zones
    if ("Management Zones" %in% input$zones) {
      proxy1 <- proxy1 %>%
        addPolygons(
          data      = manage_sf,
          fillColor = "orange", color = "orange",
          weight    = 1, opacity = 0.6, fillOpacity = 0.15,
          group     = "Management Zones", label = ~AREA_DESCR
        )
    }
    
    proxy1 %>%
      addLayersControl(
        overlayGroups = c("Reefal", "Non-Reefal", "Management Zones"),
        options       = layersControlOptions(collapsed = FALSE)
      )
  })
  
  
  # 5) Comparison UI — only appears after Confirm
  output$compare_ui <- renderUI({
    req(comp_year())
    box(
      title       = paste("Comparison Map — Year:", comp_year()),
      width       = NULL,
      status      = "primary",
      solidHeader = TRUE,
      leafletOutput("map2", height = "600px")
    )
  })
  
  
  # 6) Render base comparison map
  output$map2 <- renderLeaflet({
    req(comp_year())
    leaflet() %>%
      addProviderTiles("CartoDB.Positron") %>%
      setView(lng = 147.6, lat = -18.3, zoom = 5)
  })
  
  
  # 7) Update comparison map on comp_year/variable/zones change
  observe({
    req(comp_year())
    
    df2   <- yearly_temp_avg %>% filter(year == comp_year())
    var   <- input$variable
    vals2 <- df2[[ var ]]
    pal2  <- colorNumeric(viridis::viridis(100), domain = vals2)
    pop2  <- paste0(
      switch(var,
        mean_dhw  = "DHW: ",
        mean_sst  = "SST: ",
        mean_ssta = "SSTA: "
      ),
      round(vals2, 2)
    )
    
    proxy2 <- leafletProxy("map2", data = df2) %>%
      clearMarkers() %>%
      clearShapes() %>%
      clearControls() %>%
      addCircleMarkers(
        radius      = 3,
        stroke      = FALSE,
        fillOpacity = 0.7,
        fillColor   = pal2(vals2),
        popup       = pop2
      ) %>%
      addLegend(
        position = "topright",
        pal      = pal2,
        values   = vals2,
        title    = switch(var,
                     mean_dhw  = "Mean DHW",
                     mean_sst  = "Mean SST",
                     mean_ssta = "Mean SSTA"
                   ),
        opacity  = 0.8
      )
    
    if ("Reefal" %in% input$zones) {
      proxy2 <- proxy2 %>%
        addPolygons(
          data      = filter(bioregions_sf, reef_status == "Reefal"),
          fillColor = "lightblue", color = "lightblue",
          weight    = 1, opacity = 0.5, fillOpacity = 0.2
        )
    }
    if ("Non-Reefal" %in% input$zones) {
      proxy2 <- proxy2 %>%
        addPolygons(
          data      = filter(bioregions_sf, reef_status == "Non-Reefal"),
          fillColor = "lightgreen", color = "lightgreen",
          weight    = 1, opacity = 0.5, fillOpacity = 0.2
        )
    }
    if ("Management Zones" %in% input$zones) {
      proxy2 <- proxy2 %>%
        addPolygons(
          data      = manage_sf,
          fillColor = "orange", color = "orange",
          weight    = 1, opacity = 0.6, fillOpacity = 0.15
        )
    }
    
    proxy2 %>%
      addLayersControl(
        overlayGroups = c("Reefal", "Non-Reefal", "Management Zones"),
        options       = layersControlOptions(collapsed = FALSE)
      )
  })
  
  
  # 8) SOI anomaly plot
  output$soi_plot <- renderPlot({
    ggplot(soi, aes(x = date, y = soi_anomaly)) +
      geom_line(color = "#2c7fb8") +
      labs(
        x     = "Date",
        y     = "SOI Anomaly",
        title = "Southern Oscillation Index (SOI) Anomaly Over Time"
      ) +
      theme_minimal()
  })
  
  
  # 9) Monthly DHW plot
  output$dhw_monthly_plot <- renderPlot({
    monthly_dhw %>%
      filter(year == input$year) %>%
      ggplot(aes(x = month, y = mean_dhw, group = 1)) +
        geom_line(color = "#d95f02") +
        geom_point() +
        labs(
          x     = "Month",
          y     = "Mean DHW",
          title = paste("Monthly Mean DHW in", input$year)
        ) +
      theme_minimal()
  })
}
```

```{r}
shinyApp(ui, server)
```

