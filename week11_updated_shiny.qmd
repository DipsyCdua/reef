---
title: "imane"
format: html
editor: source
---

# shiny app - MAP
```{r setup, echo=FALSE}
library(shiny)
library(shinydashboard)
library(dplyr)
library(sf)
library(leaflet)
library(stringr)
library(lubridate)
library(readr)
library(tidyr)
library(viridis)
library(plotly)
library(gghighlight)
```

# temperature variables (DHW)
```{r warning=FALSE}
#----REEF TEMP----
# this will be the directory to the "NOAA_data" folder in the google drive
data_dir <- "D:/R_studio_working_dir/DATA3888_group/reef/NOAA_data-20250518T095925Z-1-001/NOAA_data"
csv_files <- list.files(data_dir, pattern = "\\.csv$", full.names = TRUE)

# read and format each csv
load_and_process_csv <- function(file) {
  df <- read_csv(file)
  df <- df|>
    mutate(
      year = year(as.Date(date)),
      # extract lon and lat from "c(lon, lat)"
      lon = as.numeric(str_extract(geometry, "(?<=c\\()[^,]+")),
      lat = as.numeric(str_extract(geometry, "(?<=,\\s)-?\\d+\\.\\d+(?=\\))"))
    )
  return(df)
}

# combine all csv files to 1 dataframe
all_data <- bind_rows(lapply(csv_files, load_and_process_csv))

# drop original coordinate column, since we have lon and lat
all_date_clean <- all_data |>
  select(-geometry)


# ONLY DHW yearly averages per point (for the map in tab1 of shiny)
yearly_avg <- all_data |>
  group_by(year, lon, lat) |>
  summarise(mean_dhw = mean(mean_dhw, na.rm = TRUE), .groups = "drop") |>
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

# ONLY DHW monthly average df for entire GBR (for the plot in tab2 of shiny)
monthly_dhw <- all_data |>
  mutate(month = month(as.Date(date), label = TRUE, abbr = TRUE),
         year = year(as.Date(date))) |>
  group_by(year, month) |>
  summarise(mean_dhw = mean(mean_dhw, na.rm = TRUE), .groups = "drop")

# colour blind friendly palette
pal = colorNumeric(palette = viridis(100), domain = yearly_avg$mean_dhw)
```


right now, the shiny app only presents the mean_dhw data (yearly_avg, monthly_dhw) 

but please use these dataframes since they include all 3 variables (yearly_temp_avg, monthly_temp)
```{r}

# please use this for the map because this contains all 3 temperature variables

# ALL TEMPERATURE VARIABLES yearly avg per point on GBR
yearly_temp_avg <- all_data |>
  group_by(year, lon, lat) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE),
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  ) |>
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

# ALL TEMPERATURE VARIABLES monthly avg for entire GBR
monthly_temp <- all_data |>
  mutate(month = month(as.Date(date), label = TRUE, abbr = TRUE),
         year = year(as.Date(date))) |>
  group_by(year, month) |>
  summarise(
    mean_dhw = mean(mean_dhw, na.rm = TRUE), 
    mean_sst = mean(mean_sst, na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop")
```

# Boundaries

bioregions (reefal and non-reefal) and management areas
```{r}
#----BOUNDARIES----
# 1. bioregions overlay data
bioregions_sf <- st_read("D:/R_studio_working_dir/DATA3888_group/reef/Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074-20250518T100754Z-1-001/Great_Barrier_Reef_Marine_Park_Marine_Bioregions_20_-7203602978318279074/Great_Barrier_Reef_Marine_Park_Marine_Bioregions.shp")
# add reefal status
bioregions_sf <- bioregions_sf |> 
  mutate(
    reef_status = factor(REEF_ID, levels = c(0, 1), labels = c("Non-Reefal", "Reefal"))
  )

# 2. management zones
manage_sf <- st_read("D:/R_studio_working_dir/DATA3888_group/reef/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161-20250518T101033Z-1-001/Great_Barrier_Reef_Marine_Park_Management_Areas_20_8405662027104915161/Great_Barrier_Reef_Marine_Park_Management_Areas.shp")

# 3. shelf zones (will complete this before monday week 12, for now use management zones in the models)
```

# soi index
```{r}
# read in CLEAN soi data (this is in Reef03_EDA on google drive)
soi <- read.csv("D:/R_studio_working_dir/DATA3888_group/reef/soi_index.csv")
str(soi)

# change date column
soi <- soi |> mutate(date = as.Date(date))
```

# new ver (v0.6) compare button work

```{r}
yearly_temp_avg <- all_data %>%
  # extract year first, if you haven't already
  mutate(year = as.integer(format(as.Date(date), "%Y"))) %>%
  # group by year and each lon/lat point
  group_by(year, lon, lat) %>%
  # compute mean for all three metrics
  summarise(
    mean_dhw  = mean(mean_dhw,  na.rm = TRUE),
    mean_sst  = mean(mean_sst,  na.rm = TRUE),
    mean_ssta = mean(mean_ssta, na.rm = TRUE),
    .groups = "drop"
  ) 
```

```{r ui, echo=FALSE}
ui <- dashboardPage(
  dashboardHeader(title = "GBR Heat Map"),
  dashboardSidebar(
    sidebarMenu(
      id = "tabs",
      menuItem("Introduction", tabName = "introduction", icon = icon("info-circle")),
      menuItem("Map",          tabName = "map",          icon = icon("globe")),
      menuItem("ENSO and Temp",tabName = "enso_temp",     icon = icon("chart-line")),
      menuItem("Relation",     tabName = "relation",      icon = icon("chart-bar"))
    )
  ),
  dashboardBody(
    tabItems(
      # ─── Introduction ─────────────────────────────────────────────────
      tabItem(tabName = "introduction",
        h2("Introduction", align = "center"),
        includeMarkdown("D:/R_studio_working_dir/DATA3888_group/intro_test.md")
      ),

      # ─── Map ─────────────────────────────────────────────────────────
      tabItem(tabName = "map",
        fluidRow(
          column(width = 4,

            # Year slider
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("year", "Select Year:",
                min   = min(yearly_temp_avg$year),
                max   = max(yearly_temp_avg$year),
                value = min(yearly_temp_avg$year),
                step  = 1, sep = ""
              )
            ),

            # Model select
            box(width = NULL, status = "primary", solidHeader = TRUE,
              selectInput("variable", "Model select:",
                choices = c(
                  "Mean DHW"  = "mean_dhw",
                  "Mean SST"  = "mean_sst",
                  "Mean SSTA" = "mean_ssta"
                ), selected = "mean_dhw"
              )
            ),

            # Zones
            box(width = NULL, status = "primary", solidHeader = TRUE,
              checkboxGroupInput("zones", "Zone:",
                choices  = c("Reefal","Non-Reefal","Management Zones"),
                selected = c("Reefal","Non-Reefal","Management Zones")
              )
            ),

            # Compare controls: slider + confirm
            box(width = NULL, status = "info", solidHeader = TRUE,
              div(style = "display:flex; align-items:center;",
                sliderInput("compare_year", NULL,
                  min   = min(yearly_temp_avg$year),
                  max   = max(yearly_temp_avg$year),
                  value = min(yearly_temp_avg$year),
                  step  = 1, sep = "",
                  width = "70%"
                ),
                actionButton("confirm_compare", "Compare",
                  style = "margin-left:10px;"
                )
              )
            )
          ),

          column(width = 8,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              leafletOutput("map", height = "700px")
            ),
            # placeholder for the comparison map
            uiOutput("compare_map")
          )
        )
      ),

      # ─── ENSO + Temp ──────────────────────────────────────────────────
      tabItem(tabName = "enso_temp",
        fluidRow(
          box(title = "SOI Anomaly Over Time", width = 12,
            plotlyOutput("soi_plot", height = "300px")
          )
        ),
        fluidRow(
          column(width = 3,
            box(width = NULL, status = "primary", solidHeader = TRUE,
              sliderInput("dhw_year", "Select Year for DHW Plot:",
                min   = min(monthly_dhw$year),
                max   = max(monthly_dhw$year),
                value = min(monthly_dhw$year),
                step  = 1, sep = ""
              )
            )
          ),
          column(width = 9,
            box(title = "Monthly Mean DHW for Selected Year", width = NULL,
              status = "primary", solidHeader = TRUE,
              plotlyOutput("dhw_monthly_plot", height = "300px")
            )
          )
        )
      ),

      # ─── Relation ────────────────────────────────────────────────────
      tabItem(tabName = "relation",
        h2("Relation Plot", align = "center"),
        p("Put your relation-analysis content or placeholder here.")
      )
    )
  )
)
```

```{r server, echo=FALSE}
server <- function(input, output, session) {

  # Reproject boundaries on the fly
  bio4326 <- st_transform(bioregions_sf, 4326)
  man4326 <- st_transform(manage_sf,       4326)

  # Hold compare year
  comp_year <- reactiveVal(NULL)
  observeEvent(input$year,        comp_year(NULL),        ignoreInit = TRUE)
  observeEvent(input$confirm_compare, {
    # store the compare year
    comp_year(input$compare_year)
  
    # immediately pop up a modal to tell them the map is below
    showModal(modalDialog(
      h4("Compared map is displayed below"),
      footer = modalButton("Confirm"),
      easyClose = FALSE
    ))
  })

  # Main map
  output$map <- renderLeaflet({
    req(input$year, input$variable, input$zones)
    df <- yearly_temp_avg %>%
      filter(year == input$year) %>%
      mutate(
        val   = .data[[ input$variable ]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "DHW: ",
            mean_sst  = "SST: ",
            mean_ssta = "SSTA: "
          ), round(val,2)
        )
      )
    pal <- colorNumeric(viridis(100), domain = df$val)

    m <- leaflet(df) %>%
      addProviderTiles("CartoDB.Positron") %>%
      setView(147.6, -18.3, zoom = 5) %>%
      addCircleMarkers(
        radius = 3, stroke = FALSE, fillOpacity = 0.7,
        color = ~pal(val), popup = ~popup
      ) %>%
      addLegend(
        position = "topright", pal = pal, values = df$val,
        title   = switch(input$variable,
                    mean_dhw  = "Mean DHW",
                    mean_sst  = "Mean SST",
                    mean_ssta = "Mean SSTA"
                  ), opacity = 0.8
      )
    if ("Reefal" %in% input$zones) {
      m <- m %>% addPolygons(
        data = filter(bio4326, reef_status=="Reefal"),
        fillColor="lightblue", color="lightblue",
        weight=1, opacity=0.5, fillOpacity=0.2
      )
    }
    if ("Non-Reefal" %in% input$zones) {
      m <- m %>% addPolygons(
        data = filter(bio4326, reef_status=="Non-Reefal"),
        fillColor="lightgreen", color="lightgreen",
        weight=1, opacity=0.5, fillOpacity=0.2
      )
    }
    if ("Management Zones" %in% input$zones) {
      m <- m %>% addPolygons(
        data=man4326,
        fillColor="orange", color="orange",
        weight=1, opacity=0.6, fillOpacity=0.15
      )
    }
    m
  })

  # Comparison map UI
  output$compare_map <- renderUI({
    req(comp_year())
    box(title = paste("Comparison Map — Year:", comp_year()),
        width = NULL, status = "primary", solidHeader = TRUE,
        leafletOutput("map2", height = "700px"))
  })

  # Comparison map
  output$map2 <- renderLeaflet({
    req(comp_year(), input$variable, input$zones)
    df2 <- yearly_temp_avg %>%
      filter(year == comp_year()) %>%
      mutate(
        val   = .data[[ input$variable ]],
        popup = paste0(
          switch(input$variable,
            mean_dhw  = "DHW: ",
            mean_sst  = "SST: ",
            mean_ssta = "SSTA: "
          ), round(val,2)
        )
      )
    pal2 <- colorNumeric(viridis(100), domain = df2$val)

    m2 <- leaflet(df2) %>%
      addProviderTiles("CartoDB.Positron") %>%
      setView(147.6, -18.3, zoom = 5) %>%
      addCircleMarkers(
        radius = 3, stroke = FALSE, fillOpacity = 0.7,
        color = ~pal2(val), popup = ~popup
      ) %>%
      addLegend(
        position = "topright", pal = pal2, values = df2$val,
        title   = switch(input$variable,
                    mean_dhw  = "Mean DHW",
                    mean_sst  = "Mean SST",
                    mean_ssta = "Mean SSTA"
                  ), opacity = 0.8
      )
    if ("Reefal" %in% input$zones) {
      m2 <- m2 %>% addPolygons(
        data=filter(bio4326, reef_status=="Reefal"),
        fillColor="lightblue", color="lightblue",
        weight=1, opacity=0.5, fillOpacity=0.2
      )
    }
    if ("Non-Reefal" %in% input$zones) {
      m2 <- m2 %>% addPolygons(
        data=filter(bio4326, reef_status=="Non-Reefal"),
        fillColor="lightgreen", color="lightgreen",
        weight=1, opacity=0.5, fillOpacity=0.2
      )
    }
    if ("Management Zones" %in% input$zones) {
      m2 <- m2 %>% addPolygons(
        data=man4326,
        fillColor="orange", color="orange",
        weight=1, opacity=0.6, fillOpacity=0.15
      )
    }
    m2
  })

  # SOI anomaly
  output$soi_plot <- renderPlotly({
    req(input$dhw_year)
  
    # compute the start/end of the selected year
    start_date <- as.Date(paste0(input$dhw_year, "-01-01"))
    end_date   <- as.Date(paste0(input$dhw_year, "-12-31"))
  
    p1 <- ggplot(soi, aes(x = date, y = soi_anomaly)) +
      geom_line(color = "#2c7fb8") +
      gghighlight(
        date >= start_date & date <= end_date,
        unhighlighted_params = list(color = "gray80")
      ) +
      theme_minimal() +
      labs(
        x     = "Date",
        y     = "SOI Anomaly",
        title = paste("SOI Anomaly —", input$dhw_year, "highlighted")
      )
  
    ggplotly(p1)
  })

  # Monthly DHW
  output$dhw_monthly_plot <- renderPlotly({
    p2 <- monthly_dhw %>%
      filter(year == input$dhw_year) %>%
      ggplot(aes(month, mean_dhw, group=1)) +
        geom_line(color="#d95f02") + geom_point() +
        labs(title=paste("Monthly Mean DHW in", input$dhw_year)) +
        theme_minimal()
    ggplotly(p2)
  })
}
```

```{r}
shinyApp(ui, server)
```

